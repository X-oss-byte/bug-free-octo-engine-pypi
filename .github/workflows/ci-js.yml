name: CI JS

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  build:
    name: build and test
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [
            ubuntu-latest,
            macos-latest,
            # windows-latest,
          ]

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.0
          cache: true
          cache-dependency-path: cli/go.sum

      - name: Set Up Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Up Go and GRPC protobuf
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0

      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.2.1

      - name: Setup Yarn
        run: npm i -g yarn

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: pnpm

      - name: Configure corepack
        # Forcibly upgrade our available version of corepack.
        # The bundled version in node 16 has known issues.
        # Prepends the corepack bin dir so that it is always first.
        shell: bash
        run: |
          npm install --force --global corepack@latest
          npm config get prefix >> $GITHUB_PATH
          corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Run create-turbo tests
        # `pnpm --` calls the `turbo` script in the root package.json
        # --filter and --color args are for turbo CLI
        # -- --runInBand is passed forward to jest (which is in packages/create-turbo package.json `test` script)
        run: pnpm -- turbo run test --filter=create-turbo --color -- --runInBand

      - name: Run all other packages tests
        run: pnpm -- turbo run test --filter=!create-turbo --filter=!cli --color
