name: 2. Turborepo Release (go binary)

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Staging branch to run release from"

jobs:
  # compiles linux and windows in a container
  cross:
    runs-on: ubuntu-latest
    container:
      image: docker://ghcr.io/vercel/turbo-cross:v1.18.5
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "${{ inputs.release_branch }}"
      - run: git fetch origin --tags
      - uses: ./.github/actions/setup-go
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - run: apt-get install -y build-essential binutils-aarch64-linux-gnu
        # Yes, I'm aware of the irony of installing Zig to compile our Go + Rust project
      - run: |
          mkdir ../zig
          curl --show-error --location https://ziglang.org/builds/zig-linux-x86_64-0.11.0-dev.1908+06b263825.tar.xz | tar -J -xf - -C ../zig --strip-components 1
          export PATH=$PATH:$(pwd)/../zig
          echo "$(pwd)/../zig" >> $GITHUB_PATH
      - uses: actions-rs/toolchain@v1
      - run: |
          rustup target add aarch64-unknown-linux-musl
          rustup target add x86_64-pc-windows-gnu
          rustup target add x86_64-unknown-linux-musl

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: latest
          install-only: true
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - name: Build Artifacts
        run: cd cli && make build-go-turbo-cross
        env:
          CC_aarch64_unknown_linux_musl: zig cc -target aarch64-linux-musl
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: turbo-go-cross-${{ inputs.release_branch }}
          path: cli/dist-cross
