# Reusable workflow to setup next.js integration test environment.
name: Setup Next.js

on:
  workflow_call:
    inputs:
      # Allow to specify Next.js version to run integration test against.
      # If not specified, will use latest release version including canary.
      version:
        type: string

jobs:
  build_nextjs:
    name: Build Next.js for the turbopack integration test
    runs-on: ubuntu-latest
    env:
      # pnpm version should match to what upstream next.js uses
      PNPM_VERSION: 7.24.3
    steps:
      - name: Find Next.js latest release version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Grab the latest release version from next.js repo, including prelease. `/releases/latest` will only return latest stable release.
          echo NEXJS_LATEST_VERSION=$(gh release --repo vercel/next.js --limit 1 list | sed -n 1p | awk '{print $1}') >> $GITHUB_ENV
      - name: Set Next.js release version
        run: |
          echo "NEXTJS_VERSION=${{ inputs.version != '' && inputs.version || env.NEXJS_LATEST_VERSION }}" >> $GITHUB_ENV
          echo "Checking out Next.js ${{ env.NEXTJS_VERSION }}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - name: Checkout Next.js
        uses: actions/checkout@v3
        with:
          repository: vercel/next.js
          ref: ${{ env.NEXTJS_VERSION }}

      - name: Checkout failed test lists
        uses: actions/checkout@v3
        with:
          repository: vercel/turbo
          ref: nextjs-integration-test-data
          path: integration-test-data

      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - uses: actions/cache/restore@v3
        id: restore-build
        with:
          path: |
            ./*
          key: ${{ inputs.version }}-${{ github.sha }}

      - name: Build next.js volume
        run: |
          ./next-dev --version
          docker volume create nextjs-test-volume
          # Run a dummy container to cp checked out next.js to the volume
          docker run --rm -d --mount src=nextjs-test-volume,dst=/work --name dummy mcr.microsoft.com/playwright:v1.28.1-focal tail -f /dev/null
          docker cp ./ dummy:/work
          docker stop dummy
          # Build next-dev
          docker run --rm --mount src=nextjs-test-volume,dst=/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "apt update && apt install build-essential libssl-dev zsh -y && apt-get install --reinstall pkg-config libfontconfig1-dev cmake-data -y && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && export PATH="/root/.cargo/bin:${PATH}" && git config --global --add safe.directory /work && cd /work && git status && cd packages/next-swc && cargo build --release -p next-dev --no-default-features --features cli,custom_allocator,rustls-tls,__internal_nextjs_integration_test"
          # Build next.js
          docker run --rm --mount src=nextjs-test-volume,dst=/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "apt update && apt install build-essential libssl-dev zsh -y && apt-get install --reinstall pkg-config libfontconfig1-dev cmake-data -y && curl https://install-node.vercel.app/v16 | FORCE=1 bash && npm i -g pnpm@${PNPM_VERSION} && pnpm --version && git config --global --add safe.directory /work && cd /work && git status && pnpm install && pnpm run build"
          # Backup named volume to tar. Named volume is created under /var/lib, which is not accessible by github action.
          docker run --mount src=nextjs-test-volume,dst=/volume --rm --log-driver none loomchild/volume-backup backup > volume.tar.bz2

      # If input version is published release, detect version by running next.js build.
      - name: Detects Next.js build version
        run: |
          # Validate next-dev binary
          docker run --rm --mount src=nextjs-test-volume,dst=/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c '/work/packages/next-swc/target/release/next-dev --version'
          # This is being used in github action to collect test results. Do not change it, or should update ./.github/actions/next-integration-test to match.
          docker run --rm --mount src=nextjs-test-volume,dst=/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c 'curl https://install-node.vercel.app/v16 | FORCE=1 bash && cd /work && echo RUNNING NEXTJS VERSION: $(packages/next/dist/bin/next --version)'

      # Once build completes, creates a cache of the build output
      # so subsequent job to actually execute tests can reuse it.
      # Note that we do not use upload / download artifacts for this -
      # it is too heavyweight for the purpose since we do not need to persist
      # the cache across multiple runs.
      - name: Store next.js build cache with next-dev binary
        uses: actions/cache/save@v3
        id: cache-build
        with:
          path: |
            ./*
          key: ${{ inputs.version }}-${{ github.sha }}
