name: Publish @next/rs packages

on:
  push:
    branches: [padmaia/next_rs]

env:
  NAPI_CLI_VERSION: 2.14.7
  TURBO_VERSION: 1.6.3
  RUST_TOOLCHAIN: nightly-2022-11-04
  PNPM_VERSION: 7.24.3

jobs:
  publishRelease:
    name: Potentially publish release
    runs-on: ubuntu-latest
    needs:
      #- build
      - build-wasm
      - build-native
      #- build-native-freebsd
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ELEVATED }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      # - uses: actions/cache@v3
      #   timeout-minutes: 5
      #   id: restore-build
      #   with:
      #     path: ./*
      #     key: ${{ github.sha }}-${{ github.run_number }}
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: next-rs-binaries
          path: packages/next-rs/native

      - uses: actions/download-artifact@v3
        with:
          name: wasm-binaries
          path: crates/next-rs-wasm

      - run: npm i -g pnpm@${PNPM_VERSION}
      - run: pnpm i
      - name: Write NPM_TOKEN
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN_ELEVATED }}" > ~/.npmrc
      - run: ./scripts/publish-next-rs.js

  # Build binaries for publishing
  build-native:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # pnpm is aliased here temporarily until the build docker
          # image is updated past Node.js v14.19 (current 14.18.1)
          - host: macos-latest
            target: "x86_64-apple-darwin"
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              pnpm build:nextrs --release --target x86_64-apple-darwin
              strip -x packages/next-rs/native/next-rs.*.node
          - host: windows-latest
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              pnpm run build:nextrs --release --target x86_64-pc-windows-msvc
            target: "x86_64-pc-windows-msvc"
          - host: windows-latest
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              turbo run build:nextrs-no-plugin -- --release --target i686-pc-windows-msvc
            target: "i686-pc-windows-msvc"
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:stable-2022-10-24-x64
            build: >-
              set -e &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add x86_64-unknown-linux-gnu &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              unset CC_x86_64_unknown_linux_gnu && unset CC &&
              pnpm run build:nextrs --release --target x86_64-unknown-linux-gnu &&
              strip packages/next-rs/native/next-rs.*.node
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-musl"
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:stable-2022-10-24-alpine
            build: >-
              set -e &&
              apk add --no-cache libc6-compat &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add x86_64-unknown-linux-musl &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              pnpm run build:nextrs --release --target x86_64-unknown-linux-musl &&
              strip packages/next-rs/native/next-rs.*.node
          - host: macos-latest
            target: "aarch64-apple-darwin"
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              pnpm run build:nextrs --release --target aarch64-apple-darwin
              strip -x packages/next-rs/native/next-rs.*.node
          - host: ubuntu-latest
            target: "aarch64-unknown-linux-gnu"
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:stable-2022-10-24-aarch64
            build: >-
              set -e &&
              export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add aarch64-unknown-linux-gnu &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc &&
              pnpm run build:nextrs --release --target aarch64-unknown-linux-gnu &&
              llvm-strip -x packages/next-rs/native/next-rs.*.node
          - host: ubuntu-latest
            target: "armv7-unknown-linux-gnueabihf"
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi
              turbo run build:nextrs-no-plugin -- --release --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip packages/next-rs/native/next-rs.*.node
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              export CLANG_VERSION=`ls ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang | sed 's/ *$//g'`
              export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              export CC="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              export CXX="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang++"
              export AR="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
              export PATH="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}"
              touch "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/${CLANG_VERSION}/lib/linux/aarch64/libgcc.a"
              chmod 777 "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/${CLANG_VERSION}/lib/linux/aarch64/libgcc.a"
              echo "INPUT(-lunwind)" > "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/${CLANG_VERSION}/lib/linux/aarch64/libgcc.a"
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi
              pnpm run build:nextrs --release --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip packages/next-rs/native/next-rs.*.node
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: |
              export CLANG_VERSION=`ls ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang | sed 's/ *$//g'`
              export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang"
              export CC="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang"
              export CXX="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang++"
              export AR="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
              export PATH="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}"
              touch "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/${CLANG_VERSION}/lib/linux/arm/libgcc.a"
              chmod 777 "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/${CLANG_VERSION}/lib/linux/arm/libgcc.a"
              echo "INPUT(-lunwind)" > "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/${CLANG_VERSION}/lib/linux/arm/libgcc.a"
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              turbo run build:nextrs-no-plugin -- --release --target armv7-linux-androideabi
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip packages/next-rs/native/next-rs.*.node
          - host: ubuntu-latest
            target: "aarch64-unknown-linux-musl"
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:stable-2022-10-24-alpine
            build: >-
              set -e &&
              apk add --no-cache libc6-compat &&
              export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add aarch64-unknown-linux-musl &&
              pnpm run build:nextrs --release --target aarch64-unknown-linux-musl &&
              llvm-strip -x packages/next-rs/native/next-rs.*.node
          - host: windows-latest
            target: "aarch64-pc-windows-msvc"
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              turbo run build:nextrs-no-plugin-woa -- --release --target aarch64-pc-windows-msvc --cargo-flags=--no-default-features
    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}
    env:
      TURBO_TEAM: "vercel"
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_REMOTE_ONLY: "true"
    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off
        if: ${{ matrix.settings.host == 'ubuntu-latest' }}
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off
        if: ${{ matrix.settings.host == 'ubuntu-latest' }}
      - name: tune windows network
        run: Disable-NetAdapterChecksumOffload -Name * -TcpIPv4 -UdpIPv4 -TcpIPv6 -UdpIPv6
        if: ${{ matrix.settings.host == 'windows-latest' }}
      - name: tune mac network
        run: sudo sysctl -w net.link.generic.system.hwcksum_tx=0 && sudo sysctl -w net.link.generic.system.hwcksum_rx=0
        if: ${{ matrix.settings.host == 'macos-latest' }}
      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v3
      # We use restore-key to pick latest cache.
      # We will not get exact match, but doc says
      # "If there are multiple partial matches for a restore key, the action returns the most recently created cache."
      # So we get latest cache
      # - name: Cache built files
      #   uses: actions/cache@v3
      #   timeout-minutes: 5
      #   with:
      #     path: ./packages/next-rs/target
      #     key: next-rs-cargo-cache-${{ matrix.settings.target }}--${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       next-rs-cargo-cache-${{ matrix.settings.target }}

      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 16
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ !matrix.settings.docker }}
        with:
          profile: minimal
          override: true
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.settings.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        timeout-minutes: 5
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-cargo-registry

      - name: Cache cargo index
        uses: actions/cache@v3
        timeout-minutes: 5
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-index

      # - name: normalize versions
      #   run: node scripts/normalize-version-bump.js

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: -e RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }} -e NAPI_CLI_VERSION=${{ env.NAPI_CLI_VERSION }} -e TURBO_VERSION=${{ env.TURBO_VERSION }} -e TURBO_TEAM=vercel -e TURBO_TOKEN=${{ secrets.TURBO_TOKEN }} -e TURBO_REMOTE_ONLY=true -v ${{ env.HOME }}/.cargo/git:/root/.cargo/git -v ${{ env.HOME }}/.cargo/registry:/root/.cargo/registry -v ${{ github.workspace }}:/build -w /build
          run: ${{ matrix.settings.build }}

      - name: "Build"
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        #if: ${{ needs.build.outputs.isRelease == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: next-rs-binaries
          path: packages/next-rs/native/next-rs.*.node

  build-wasm:
    # needs: build
    # if: ${{ needs.build.outputs.isRelease == 'true' || (needs.build.outputs.turboToken != 'empty') }}
    strategy:
      matrix:
        target: [web, nodejs]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          target: wasm32-unknown-unknown

      - run: npm i -g pnpm@${PNPM_VERSION}

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build
        run: pnpm --filter=@next/rs build-wasm --target ${{ matrix.target }}

      - name: Add target to folder name
        run: '[[ -d "crates/next-rs-wasm/pkg" ]] && mv crates/next-rs-wasm/pkg crates/next-rs-wasm/pkg-${{ matrix.target }} || ls crates/next-rs-wasm'

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: wasm-binaries
          path: crates/next-rs-wasm/pkg-*
