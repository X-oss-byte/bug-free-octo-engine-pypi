{
  "ref": "e10e580304993f93225cdbee7c9e5c74c0ac1e50",
  "nextjsVersion": "Next.js v13.1.7-canary.8",
  "result": [
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/development/acceptance-app/component-stack.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 12,
        "numPassedTestSuites": 0,
        "numPassedTests": 4,
        "numPendingTestSuites": 0,
        "numPendingTests": 20,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 36,
        "openHandles": [],
        "snapshot": {
          "added": 5,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 1,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 5,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676033955019,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default should strip whitespace correctly with newline",
                "location": null,
                "status": "pending",
                "title": "should strip whitespace correctly with newline"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default module init error not shown",
                "location": null,
                "status": "pending",
                "title": "module init error not shown"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default boundaries",
                "location": null,
                "status": "pending",
                "title": "boundaries"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default internal package errors",
                "location": null,
                "status": "pending",
                "title": "internal package errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default unterminated JSX",
                "location": null,
                "status": "pending",
                "title": "unterminated JSX"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default conversion to class component (1)",
                "location": null,
                "status": "pending",
                "title": "conversion to class component (1)"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default css syntax errors",
                "location": null,
                "status": "pending",
                "title": "css syntax errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default logbox: anchors links in error messages",
                "location": null,
                "status": "pending",
                "title": "logbox: anchors links in error messages"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default non-Error errors are handled properly",
                "location": null,
                "status": "pending",
                "title": "non-Error errors are handled properly"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Should not show __webpack_exports__ when exporting anonymous arrow function",
                "location": null,
                "status": "pending",
                "title": "Should not show __webpack_exports__ when exporting anonymous arrow function"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Unhandled errors and rejections opens up in the minimized state",
                "location": null,
                "status": "pending",
                "title": "Unhandled errors and rejections opens up in the minimized state"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Call stack count is correct for server error",
                "location": null,
                "status": "pending",
                "title": "Call stack count is correct for server error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Call stack count is correct for client error",
                "location": null,
                "status": "pending",
                "title": "Call stack count is correct for client error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Server component errors should open up in fullscreen",
                "location": null,
                "status": "pending",
                "title": "Server component errors should open up in fullscreen"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Import trace when module not found in layout",
                "location": null,
                "status": "pending",
                "title": "Import trace when module not found in layout"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Can't resolve @import in CSS file",
                "location": null,
                "status": "pending",
                "title": "Can't resolve @import in CSS file"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default server component can recover from error thrown in the module",
                "location": null,
                "status": "pending",
                "title": "server component can recover from error thrown in the module"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default client component can recover from error thrown in the module",
                "location": null,
                "status": "pending",
                "title": "client component can recover from error thrown in the module"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo should strip whitespace correctly with newline",
                "location": null,
                "status": "passed",
                "title": "should strip whitespace correctly with newline"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:95:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo module init error not shown",
                "location": null,
                "status": "failed",
                "title": "module init error not shown"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo boundaries",
                "location": null,
                "status": "passed",
                "title": "boundaries"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo internal package errors",
                "location": null,
                "status": "pending",
                "title": "internal package errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:226:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo unterminated JSX",
                "location": null,
                "status": "failed",
                "title": "unterminated JSX"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:279:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo conversion to class component (1)",
                "location": null,
                "status": "failed",
                "title": "conversion to class component (1)"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:324:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo css syntax errors",
                "location": null,
                "status": "failed",
                "title": "css syntax errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-toast]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo logbox: anchors links in error messages",
                "location": null,
                "status": "failed",
                "title": "logbox: anchors links in error messages"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo non-Error errors are handled properly",
                "location": null,
                "status": "pending",
                "title": "non-Error errors are handled properly"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:668:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo Should not show __webpack_exports__ when exporting anonymous arrow function",
                "location": null,
                "status": "failed",
                "title": "Should not show __webpack_exports__ when exporting anonymous arrow function"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('.nextjs-toast-errors')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Unhandled errors and rejections opens up in the minimized state",
                "location": null,
                "status": "failed",
                "title": "Unhandled errors and rejections opens up in the minimized state"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Call stack count is correct for server error",
                "location": null,
                "status": "failed",
                "title": "Call stack count is correct for server error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Call stack count is correct for client error",
                "location": null,
                "status": "failed",
                "title": "Call stack count is correct for client error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#text')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Server component errors should open up in fullscreen",
                "location": null,
                "status": "failed",
                "title": "Server component errors should open up in fullscreen"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo Import trace when module not found in layout",
                "location": null,
                "status": "passed",
                "title": "Import trace when module not found in layout"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:912:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo Can't resolve @import in CSS file",
                "location": null,
                "status": "failed",
                "title": "Can't resolve @import in CSS file"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo server component can recover from error thrown in the module",
                "location": null,
                "status": "passed",
                "title": "server component can recover from error thrown in the module"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at /work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:924:47"
                ],
                "fullName": "ReactRefreshLogBox app turbo client component can recover from error thrown in the module",
                "location": null,
                "status": "failed",
                "title": "client component can recover from error thrown in the module"
              }
            ],
            "endTime": 1676034591945,
            "message": "  ● ReactRefreshLogBox app turbo › module init error not shown\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      93 |       )\n      94 |\n    > 95 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      96 |       if (process.platform === 'win32') {\n      97 |         expect(await session.getRedboxSource()).toMatchSnapshot()\n      98 |       } else {\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:95:45)\n\n  ● ReactRefreshLogBox app turbo › unterminated JSX\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      224 |       )\n      225 |\n    > 226 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      227 |\n      228 |       const source = await session.getRedboxSource()\n      229 |       expect(source).toMatchSnapshot()\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:226:45)\n\n  ● ReactRefreshLogBox app turbo › conversion to class component (1)\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      277 |       )\n      278 |\n    > 279 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      280 |       expect(await session.getRedboxSource()).toMatchSnapshot()\n      281 |\n      282 |       await session.patch(\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:279:45)\n\n  ● ReactRefreshLogBox app turbo › css syntax errors\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      322 |       // Syntax error\n      323 |       await session.patch('index.module.css', `.button {`)\n    > 324 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      325 |       const source = await session.getRedboxSource()\n      326 |       expect(source).toMatch('./index.module.css:1:1')\n      327 |       expect(source).toMatch('Syntax error: ')\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:324:45)\n\n  ● ReactRefreshLogBox app turbo › logbox: anchors links in error messages\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-toast]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Should not show __webpack_exports__ when exporting anonymous arrow function\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      666 |       )\n      667 |\n    > 668 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      669 |       expect(await session.getRedboxSource()).toMatchSnapshot()\n      670 |\n      671 |       await cleanup()\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:668:45)\n\n  ● ReactRefreshLogBox app turbo › Unhandled errors and rejections opens up in the minimized state\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('.nextjs-toast-errors')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Call stack count is correct for server error\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Call stack count is correct for client error\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Server component errors should open up in fullscreen\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#text')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Can't resolve @import in CSS file\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      910 |       )\n      911 |\n    > 912 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      913 |       expect(await session.getRedboxSource()).toMatchSnapshot()\n      914 |\n      915 |       await cleanup()\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:912:45)\n\n  ● ReactRefreshLogBox app turbo › client component can recover from error thrown in the module\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      922 |\n      923 |         await next.patchFile('index.js', \"throw new Error('module error')\")\n    > 924 |         expect(await session.hasRedbox(true)).toBe(true)\n          |                                               ^\n      925 |         await next.patchFile(\n      926 |           'index.js',\n      927 |           'export default function Page() {return <p>hello world</p>}'\n\n      at development/acceptance-app/ReactRefreshLogBox.test.ts:924:47\n",
            "name": "/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts",
            "startTime": 1676033955112,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/e2e/i18n-api-support/index.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 3,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676035184083,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [],
                "fullName": "prerender native module should render index correctly",
                "location": null,
                "status": "passed",
                "title": "should render index correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/first correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/first correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/second correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/second correctly"
              }
            ],
            "endTime": 1676035298740,
            "message": "  ● prerender native module › should render /blog/first correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● prerender native module › should render /blog/second correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/e2e/prerender-native-module.test.ts",
            "startTime": 1676035184176,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/integration/config-empty/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 14,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 16,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 4,
          "total": 4,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676035670330,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at onData (/work/test/integration/react-streaming/test/streaming.js:37:31)\n    at PassThrough.<anonymous> (/work/test/integration/react-streaming/test/streaming.js:17:7)\n    at PassThrough.emit (node:events:513:28)\n    at PassThrough.Readable.read (node:internal/streams/readable:527:10)\n    at flow (node:internal/streams/readable:1011:34)\n    at resume_ (node:internal/streams/readable:992:3)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)"
                ],
                "fullName": "Node.js runtime dev should support streaming for fizz response",
                "location": null,
                "status": "failed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime dev should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime dev should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime dev should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should support streaming for fizz response",
                "location": null,
                "status": "passed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at onData (/work/test/integration/react-streaming/test/streaming.js:37:31)\n    at PassThrough.<anonymous> (/work/test/integration/react-streaming/test/streaming.js:17:7)\n    at PassThrough.emit (node:events:513:28)\n    at PassThrough.Readable.read (node:internal/streams/readable:527:10)\n    at flow (node:internal/streams/readable:1011:34)\n    at resume_ (node:internal/streams/readable:992:3)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)"
                ],
                "fullName": "Edge runtime dev should support streaming for fizz response",
                "location": null,
                "status": "failed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime dev should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime dev should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime dev should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should support streaming for fizz response",
                "location": null,
                "status": "passed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              }
            ],
            "endTime": 1676035733168,
            "message": "  ● Node.js runtime dev › should support streaming for fizz response\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      35 |             gotFallback = result.includes('next_streaming_fallback')\n      36 |             if (gotFallback) {\n    > 37 |               expect(gotData).toBe(false)\n         |                               ^\n      38 |             }\n      39 |           }\n      40 |         })\n\n      at onData (integration/react-streaming/test/streaming.js:37:31)\n      at PassThrough.<anonymous> (integration/react-streaming/test/streaming.js:17:7)\n\n  ● Edge runtime dev › should support streaming for fizz response\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      35 |             gotFallback = result.includes('next_streaming_fallback')\n      36 |             if (gotFallback) {\n    > 37 |               expect(gotData).toBe(false)\n         |                               ^\n      38 |             }\n      39 |           }\n      40 |         })\n\n      at onData (integration/react-streaming/test/streaming.js:37:31)\n      at PassThrough.<anonymous> (integration/react-streaming/test/streaming.js:17:7)\n",
            "name": "/work/test/integration/react-streaming/test/index.test.js",
            "startTime": 1676035670436,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/development/acceptance-app/editor-links.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 11,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 11,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676034273370,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:32:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when getServerSideProps is used",
                "location": null,
                "status": "failed",
                "title": "should throw an error when getServerSideProps is used"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:56:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when getStaticProps is used",
                "location": null,
                "status": "failed",
                "title": "should throw an error when getStaticProps is used"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:76:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error for styled-jsx imports on server side",
                "location": null,
                "status": "failed",
                "title": "should error for styled-jsx imports on server side"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:104:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error when page component export is not valid",
                "location": null,
                "status": "failed",
                "title": "should error when page component export is not valid"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:124:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when \"use client\" is on the top level but after other expressions",
                "location": null,
                "status": "failed",
                "title": "should throw an error when \"use client\" is on the top level but after other expressions"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:145:7)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when \"Component\" is imported in server components",
                "location": null,
                "status": "failed",
                "title": "should throw an error when \"Component\" is imported in server components"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toInclude(expected)\n\nExpected string to include:\n  \"You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \\\"use client\\\", so they're Server Components by default.\"\nReceived:\n  \"error - [resolve] [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js  Error resolving EcmaScript Modules request\n  unable to resolve module \\\"client-only\\\"···\n  | It was not possible to find the requested file.\n  | Parsed request as written in source code: module \\\"client-only\\\"\n  | Path where resolving has started: [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js\n  | Type of request: EcmaScript Modules request\n  | Import map: No import map entry\n  |·\n\"\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:172:47)"
                ],
                "fullName": "Error overlay - RSC build errors should allow to use and handle rsc poisoning client-only",
                "location": null,
                "status": "failed",
                "title": "should allow to use and handle rsc poisoning client-only"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:196:45)"
                ],
                "fullName": "Error overlay - RSC build errors should allow to use and handle rsc poisoning server-only",
                "location": null,
                "status": "failed",
                "title": "should allow to use and handle rsc poisoning server-only"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toInclude(expected)\n\nExpected string to include:\n  \"Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function.\"\nReceived:\n  \"unexpected export *\"\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:219:52)"
                ],
                "fullName": "Error overlay - RSC build errors should error for invalid undefined module retuning from next dynamic",
                "location": null,
                "status": "failed",
                "title": "should error for invalid undefined module retuning from next dynamic"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:239:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when error file is a server component",
                "location": null,
                "status": "failed",
                "title": "should throw an error when error file is a server component"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:303:7)"
                ],
                "fullName": "Error overlay - RSC build errors should be possible to open the import trace files in your editor",
                "location": null,
                "status": "failed",
                "title": "should be possible to open the import trace files in your editor"
              }
            ],
            "endTime": 1676034768880,
            "message": "  ● Error overlay - RSC build errors › should throw an error when getServerSideProps is used\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      30 |       await session.patch(pageFile, uncomment)\n      31 |\n    > 32 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      33 |       expect(await session.getRedboxSource()).toInclude(\n      34 |         '\"getServerSideProps\" is not supported in app/'\n      35 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:32:45)\n\n  ● Error overlay - RSC build errors › should throw an error when getStaticProps is used\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      54 |       await next.patchFile(pageFile, content)\n      55 |\n    > 56 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      57 |       expect(await session.getRedboxSource()).toInclude(\n      58 |         '\"getStaticProps\" is not supported in app/'\n      59 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:56:45)\n\n  ● Error overlay - RSC build errors › should error for styled-jsx imports on server side\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      74 |       await session.patch(pageFile, withoutUseClient)\n      75 |\n    > 76 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      77 |       expect(await session.getRedboxSource()).toMatchInlineSnapshot(`\n      78 |         \"app/server-with-errors/styled-jsx/comp2.js\n      79 |         'client-only' cannot be imported from a Server Component module. It should only be used from a Client Component.\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:76:45)\n\n  ● Error overlay - RSC build errors › should error when page component export is not valid\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      102 |       )\n      103 |\n    > 104 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      105 |       expect(await session.getRedboxDescription()).toInclude(\n      106 |         'The default export is not a React Component in page:'\n      107 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:104:45)\n\n  ● Error overlay - RSC build errors › should throw an error when \"use client\" is on the top level but after other expressions\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      122 |       await next.patchFile(pageFile, uncomment)\n      123 |\n    > 124 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      125 |       expect(await session.getRedboxSource()).toInclude(\n      126 |         'directive must be placed before other expressions'\n      127 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:124:45)\n\n  ● Error overlay - RSC build errors › should throw an error when \"Component\" is imported in server components\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:145:7)\n\n  ● Error overlay - RSC build errors › should allow to use and handle rsc poisoning client-only\n\n    expect(received).toInclude(expected)\n\n    Expected string to include:\n      \"You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \\\"use client\\\", so they're Server Components by default.\"\n    Received:\n      \"error - [resolve] [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js  Error resolving EcmaScript Modules request\n      unable to resolve module \\\"client-only\\\"···\n      | It was not possible to find the requested file.\n      | Parsed request as written in source code: module \\\"client-only\\\"\n      | Path where resolving has started: [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js\n      | Type of request: EcmaScript Modules request\n      | Import map: No import map entry\n      |·\n    \"\n\n      170 |\n      171 |       expect(await session.hasRedbox(true)).toBe(true)\n    > 172 |       expect(await session.getRedboxSource()).toInclude(\n          |                                               ^\n      173 |         `You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \"use client\", so they're Server Components by default.`\n      174 |       )\n      175 |\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:172:47)\n\n  ● Error overlay - RSC build errors › should allow to use and handle rsc poisoning server-only\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      194 |       await session.patch(file, uncomment)\n      195 |\n    > 196 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      197 |       expect(await session.getRedboxSource()).toInclude(\n      198 |         `You're importing a component that needs server-only. That only works in a Server Component but one of its parents is marked with \"use client\", so it's a Client Component.`\n      199 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:196:45)\n\n  ● Error overlay - RSC build errors › should error for invalid undefined module retuning from next dynamic\n\n    expect(received).toInclude(expected)\n\n    Expected string to include:\n      \"Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function.\"\n    Received:\n      \"unexpected export *\"\n\n      217 |\n      218 |       expect(await session.hasRedbox(true)).toBe(true)\n    > 219 |       expect(await session.getRedboxDescription()).toInclude(\n          |                                                    ^\n      220 |         `Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function.`\n      221 |       )\n      222 |\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:219:52)\n\n  ● Error overlay - RSC build errors › should throw an error when error file is a server component\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      237 |       )\n      238 |\n    > 239 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      240 |       expect(await session.getRedboxSource()).toMatchInlineSnapshot(`\n      241 |         \"./app/server-with-errors/error-file/error.js\n      242 |         ReactServerComponentsError:\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:239:45)\n\n  ● Error overlay - RSC build errors › should be possible to open the import trace files in your editor\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:303:7)\n",
            "name": "/work/test/development/acceptance-app/rsc-build-errors.test.ts",
            "startTime": 1676034273463,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/e2e/app-dir/app-alias/app-alias.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 3,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 3,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676035632817,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "@next/font/google with-font-declarations-file"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4\nReceived: 0\n    at Object.<anonymous> (/work/test/e2e/next-font/with-font-declarations-file.test.ts:59:43)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "@next/font/google with-font-declarations-file preload correct files at /inter",
                "location": null,
                "status": "failed",
                "title": "preload correct files at /inter"
              },
              {
                "ancestorTitles": [
                  "@next/font/google with-font-declarations-file"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4\nReceived: 0\n    at Object.<anonymous> (/work/test/e2e/next-font/with-font-declarations-file.test.ts:93:43)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "@next/font/google with-font-declarations-file preload correct files at /roboto",
                "location": null,
                "status": "failed",
                "title": "preload correct files at /roboto"
              },
              {
                "ancestorTitles": [
                  "@next/font/google with-font-declarations-file"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4\nReceived: 0\n    at Object.<anonymous> (/work/test/e2e/next-font/with-font-declarations-file.test.ts:127:43)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "@next/font/google with-font-declarations-file preload correct files at /local-font",
                "location": null,
                "status": "failed",
                "title": "preload correct files at /local-font"
              }
            ],
            "endTime": 1676035658029,
            "message": "  ● @next/font/google with-font-declarations-file › preload correct files at /inter\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4\n    Received: 0\n\n      57 |     if (isDev) {\n      58 |       // In dev all fonts will be preloaded since it's before DCE\n    > 59 |       expect($('link[as=\"font\"]').length).toBe(4)\n         |                                           ^\n      60 |     } else {\n      61 |       // Preload\n      62 |       expect($('link[as=\"font\"]').length).toBe(2)\n\n      at Object.<anonymous> (e2e/next-font/with-font-declarations-file.test.ts:59:43)\n\n  ● @next/font/google with-font-declarations-file › preload correct files at /roboto\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4\n    Received: 0\n\n      91 |     if (isDev) {\n      92 |       // In dev all fonts will be preloaded since it's before DCE\n    > 93 |       expect($('link[as=\"font\"]').length).toBe(4)\n         |                                           ^\n      94 |     } else {\n      95 |       // Preload\n      96 |       expect($('link[as=\"font\"]').length).toBe(2)\n\n      at Object.<anonymous> (e2e/next-font/with-font-declarations-file.test.ts:93:43)\n\n  ● @next/font/google with-font-declarations-file › preload correct files at /local-font\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4\n    Received: 0\n\n      125 |     if (isDev) {\n      126 |       // In dev all fonts will be preloaded since it's before DCE\n    > 127 |       expect($('link[as=\"font\"]').length).toBe(4)\n          |                                           ^\n      128 |     } else {\n      129 |       // Preload\n      130 |       expect($('link[as=\"font\"]').length).toBe(2)\n\n      at Object.<anonymous> (e2e/next-font/with-font-declarations-file.test.ts:127:43)\n",
            "name": "/work/test/e2e/next-font/with-font-declarations-file.test.ts",
            "startTime": 1676035632909,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/integration/config/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 9,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 9,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676036289326,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:52:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for gsp page correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for gsp page correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:84:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for gssp page correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for gssp page correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:116:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for dynamic gssp page correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for dynamic gssp page correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at runNextTicks (node:internal/process/task_queues:61:5)\n    at processTimers (node:internal/timers:499:9)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:148:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for api route correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for api route correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:180:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for dynamic api route correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for dynamic api route correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:205:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught rejection correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught rejection correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:221:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught empty rejection correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught empty rejection correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:237:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught exception correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught exception correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:253:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught empty exception correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught empty exception correctly"
              }
            ],
            "endTime": 1676036641913,
            "message": "  ● server-side dev errors › should show server-side error for gsp page correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:52:7)\n\n  ● server-side dev errors › should show server-side error for gssp page correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:84:7)\n\n  ● server-side dev errors › should show server-side error for dynamic gssp page correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:116:7)\n\n  ● server-side dev errors › should show server-side error for api route correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:148:7)\n\n  ● server-side dev errors › should show server-side error for dynamic api route correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:180:7)\n\n  ● server-side dev errors › should show server-side error for uncaught rejection correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:205:5)\n\n  ● server-side dev errors › should show server-side error for uncaught empty rejection correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:221:5)\n\n  ● server-side dev errors › should show server-side error for uncaught exception correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:237:5)\n\n  ● server-side dev errors › should show server-side error for uncaught empty exception correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:253:5)\n",
            "name": "/work/test/integration/server-side-dev-errors/test/index.test.js",
            "startTime": 1676036289419,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/development/acceptance-app/component-stack.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 12,
        "numPassedTestSuites": 0,
        "numPassedTests": 4,
        "numPendingTestSuites": 0,
        "numPendingTests": 20,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 36,
        "openHandles": [],
        "snapshot": {
          "added": 5,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 1,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 5,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676034020602,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default should strip whitespace correctly with newline",
                "location": null,
                "status": "pending",
                "title": "should strip whitespace correctly with newline"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default module init error not shown",
                "location": null,
                "status": "pending",
                "title": "module init error not shown"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default boundaries",
                "location": null,
                "status": "pending",
                "title": "boundaries"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default internal package errors",
                "location": null,
                "status": "pending",
                "title": "internal package errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default unterminated JSX",
                "location": null,
                "status": "pending",
                "title": "unterminated JSX"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default conversion to class component (1)",
                "location": null,
                "status": "pending",
                "title": "conversion to class component (1)"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default css syntax errors",
                "location": null,
                "status": "pending",
                "title": "css syntax errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default logbox: anchors links in error messages",
                "location": null,
                "status": "pending",
                "title": "logbox: anchors links in error messages"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default non-Error errors are handled properly",
                "location": null,
                "status": "pending",
                "title": "non-Error errors are handled properly"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Should not show __webpack_exports__ when exporting anonymous arrow function",
                "location": null,
                "status": "pending",
                "title": "Should not show __webpack_exports__ when exporting anonymous arrow function"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Unhandled errors and rejections opens up in the minimized state",
                "location": null,
                "status": "pending",
                "title": "Unhandled errors and rejections opens up in the minimized state"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Call stack count is correct for server error",
                "location": null,
                "status": "pending",
                "title": "Call stack count is correct for server error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Call stack count is correct for client error",
                "location": null,
                "status": "pending",
                "title": "Call stack count is correct for client error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Server component errors should open up in fullscreen",
                "location": null,
                "status": "pending",
                "title": "Server component errors should open up in fullscreen"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Import trace when module not found in layout",
                "location": null,
                "status": "pending",
                "title": "Import trace when module not found in layout"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default Can't resolve @import in CSS file",
                "location": null,
                "status": "pending",
                "title": "Can't resolve @import in CSS file"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default server component can recover from error thrown in the module",
                "location": null,
                "status": "pending",
                "title": "server component can recover from error thrown in the module"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app default"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app default client component can recover from error thrown in the module",
                "location": null,
                "status": "pending",
                "title": "client component can recover from error thrown in the module"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo should strip whitespace correctly with newline",
                "location": null,
                "status": "passed",
                "title": "should strip whitespace correctly with newline"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:95:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo module init error not shown",
                "location": null,
                "status": "failed",
                "title": "module init error not shown"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo boundaries",
                "location": null,
                "status": "passed",
                "title": "boundaries"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo internal package errors",
                "location": null,
                "status": "pending",
                "title": "internal package errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:226:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo unterminated JSX",
                "location": null,
                "status": "failed",
                "title": "unterminated JSX"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:279:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo conversion to class component (1)",
                "location": null,
                "status": "failed",
                "title": "conversion to class component (1)"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:324:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo css syntax errors",
                "location": null,
                "status": "failed",
                "title": "css syntax errors"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-toast]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo logbox: anchors links in error messages",
                "location": null,
                "status": "failed",
                "title": "logbox: anchors links in error messages"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo non-Error errors are handled properly",
                "location": null,
                "status": "pending",
                "title": "non-Error errors are handled properly"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:668:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo Should not show __webpack_exports__ when exporting anonymous arrow function",
                "location": null,
                "status": "failed",
                "title": "Should not show __webpack_exports__ when exporting anonymous arrow function"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('.nextjs-toast-errors')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Unhandled errors and rejections opens up in the minimized state",
                "location": null,
                "status": "failed",
                "title": "Unhandled errors and rejections opens up in the minimized state"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Call stack count is correct for server error",
                "location": null,
                "status": "failed",
                "title": "Call stack count is correct for server error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Call stack count is correct for client error",
                "location": null,
                "status": "failed",
                "title": "Call stack count is correct for client error"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#text')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "ReactRefreshLogBox app turbo Server component errors should open up in fullscreen",
                "location": null,
                "status": "failed",
                "title": "Server component errors should open up in fullscreen"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo Import trace when module not found in layout",
                "location": null,
                "status": "passed",
                "title": "Import trace when module not found in layout"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:912:45)"
                ],
                "fullName": "ReactRefreshLogBox app turbo Can't resolve @import in CSS file",
                "location": null,
                "status": "failed",
                "title": "Can't resolve @import in CSS file"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [],
                "fullName": "ReactRefreshLogBox app turbo server component can recover from error thrown in the module",
                "location": null,
                "status": "passed",
                "title": "server component can recover from error thrown in the module"
              },
              {
                "ancestorTitles": [
                  "ReactRefreshLogBox app turbo"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at /work/test/development/acceptance-app/ReactRefreshLogBox.test.ts:924:47"
                ],
                "fullName": "ReactRefreshLogBox app turbo client component can recover from error thrown in the module",
                "location": null,
                "status": "failed",
                "title": "client component can recover from error thrown in the module"
              }
            ],
            "endTime": 1676034656860,
            "message": "  ● ReactRefreshLogBox app turbo › module init error not shown\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      93 |       )\n      94 |\n    > 95 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      96 |       if (process.platform === 'win32') {\n      97 |         expect(await session.getRedboxSource()).toMatchSnapshot()\n      98 |       } else {\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:95:45)\n\n  ● ReactRefreshLogBox app turbo › unterminated JSX\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      224 |       )\n      225 |\n    > 226 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      227 |\n      228 |       const source = await session.getRedboxSource()\n      229 |       expect(source).toMatchSnapshot()\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:226:45)\n\n  ● ReactRefreshLogBox app turbo › conversion to class component (1)\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      277 |       )\n      278 |\n    > 279 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      280 |       expect(await session.getRedboxSource()).toMatchSnapshot()\n      281 |\n      282 |       await session.patch(\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:279:45)\n\n  ● ReactRefreshLogBox app turbo › css syntax errors\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      322 |       // Syntax error\n      323 |       await session.patch('index.module.css', `.button {`)\n    > 324 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      325 |       const source = await session.getRedboxSource()\n      326 |       expect(source).toMatch('./index.module.css:1:1')\n      327 |       expect(source).toMatch('Syntax error: ')\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:324:45)\n\n  ● ReactRefreshLogBox app turbo › logbox: anchors links in error messages\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-toast]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Should not show __webpack_exports__ when exporting anonymous arrow function\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      666 |       )\n      667 |\n    > 668 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      669 |       expect(await session.getRedboxSource()).toMatchSnapshot()\n      670 |\n      671 |       await cleanup()\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:668:45)\n\n  ● ReactRefreshLogBox app turbo › Unhandled errors and rejections opens up in the minimized state\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('.nextjs-toast-errors')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Call stack count is correct for server error\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Call stack count is correct for client error\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-data-runtime-error-collapsed-action]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Server component errors should open up in fullscreen\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#text')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● ReactRefreshLogBox app turbo › Can't resolve @import in CSS file\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      910 |       )\n      911 |\n    > 912 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      913 |       expect(await session.getRedboxSource()).toMatchSnapshot()\n      914 |\n      915 |       await cleanup()\n\n      at Object.<anonymous> (development/acceptance-app/ReactRefreshLogBox.test.ts:912:45)\n\n  ● ReactRefreshLogBox app turbo › client component can recover from error thrown in the module\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      922 |\n      923 |         await next.patchFile('index.js', \"throw new Error('module error')\")\n    > 924 |         expect(await session.hasRedbox(true)).toBe(true)\n          |                                               ^\n      925 |         await next.patchFile(\n      926 |           'index.js',\n      927 |           'export default function Page() {return <p>hello world</p>}'\n\n      at development/acceptance-app/ReactRefreshLogBox.test.ts:924:47\n",
            "name": "/work/test/development/acceptance-app/ReactRefreshLogBox.test.ts",
            "startTime": 1676034020691,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/e2e/i18n-api-support/index.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 3,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676035249737,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [],
                "fullName": "prerender native module should render index correctly",
                "location": null,
                "status": "passed",
                "title": "should render index correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/first correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/first correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/second correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/second correctly"
              }
            ],
            "endTime": 1676035364496,
            "message": "  ● prerender native module › should render /blog/first correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● prerender native module › should render /blog/second correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/e2e/prerender-native-module.test.ts",
            "startTime": 1676035249829,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/integration/config-empty/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 14,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 16,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 4,
          "total": 4,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676035735332,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at onData (/work/test/integration/react-streaming/test/streaming.js:37:31)\n    at PassThrough.<anonymous> (/work/test/integration/react-streaming/test/streaming.js:17:7)\n    at PassThrough.emit (node:events:513:28)\n    at PassThrough.Readable.read (node:internal/streams/readable:527:10)\n    at flow (node:internal/streams/readable:1011:34)\n    at resume_ (node:internal/streams/readable:992:3)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)"
                ],
                "fullName": "Node.js runtime dev should support streaming for fizz response",
                "location": null,
                "status": "failed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime dev should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime dev should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime dev should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should support streaming for fizz response",
                "location": null,
                "status": "passed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Node.js runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Node.js runtime prod should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at onData (/work/test/integration/react-streaming/test/streaming.js:37:31)\n    at PassThrough.<anonymous> (/work/test/integration/react-streaming/test/streaming.js:17:7)\n    at PassThrough.emit (node:events:513:28)\n    at PassThrough.Readable.read (node:internal/streams/readable:527:10)\n    at flow (node:internal/streams/readable:1011:34)\n    at resume_ (node:internal/streams/readable:992:3)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)"
                ],
                "fullName": "Edge runtime dev should support streaming for fizz response",
                "location": null,
                "status": "failed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime dev should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime dev should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Edge runtime dev"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime dev should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should support streaming for fizz response",
                "location": null,
                "status": "passed",
                "title": "should support streaming for fizz response"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should not stream to crawlers or google pagerender bot",
                "location": null,
                "status": "passed",
                "title": "should not stream to crawlers or google pagerender bot"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should render 500 error correctly",
                "location": null,
                "status": "passed",
                "title": "should render 500 error correctly"
              },
              {
                "ancestorTitles": [
                  "Edge runtime prod"
                ],
                "failureMessages": [],
                "fullName": "Edge runtime prod should render fallback if error raised from suspense during streaming",
                "location": null,
                "status": "passed",
                "title": "should render fallback if error raised from suspense during streaming"
              }
            ],
            "endTime": 1676035797957,
            "message": "  ● Node.js runtime dev › should support streaming for fizz response\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      35 |             gotFallback = result.includes('next_streaming_fallback')\n      36 |             if (gotFallback) {\n    > 37 |               expect(gotData).toBe(false)\n         |                               ^\n      38 |             }\n      39 |           }\n      40 |         })\n\n      at onData (integration/react-streaming/test/streaming.js:37:31)\n      at PassThrough.<anonymous> (integration/react-streaming/test/streaming.js:17:7)\n\n  ● Edge runtime dev › should support streaming for fizz response\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      35 |             gotFallback = result.includes('next_streaming_fallback')\n      36 |             if (gotFallback) {\n    > 37 |               expect(gotData).toBe(false)\n         |                               ^\n      38 |             }\n      39 |           }\n      40 |         })\n\n      at onData (integration/react-streaming/test/streaming.js:37:31)\n      at PassThrough.<anonymous> (integration/react-streaming/test/streaming.js:17:7)\n",
            "name": "/work/test/integration/react-streaming/test/index.test.js",
            "startTime": 1676035735445,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/development/acceptance-app/editor-links.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 11,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 11,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676034280898,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:32:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when getServerSideProps is used",
                "location": null,
                "status": "failed",
                "title": "should throw an error when getServerSideProps is used"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:56:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when getStaticProps is used",
                "location": null,
                "status": "failed",
                "title": "should throw an error when getStaticProps is used"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:76:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error for styled-jsx imports on server side",
                "location": null,
                "status": "failed",
                "title": "should error for styled-jsx imports on server side"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:104:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error when page component export is not valid",
                "location": null,
                "status": "failed",
                "title": "should error when page component export is not valid"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:124:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when \"use client\" is on the top level but after other expressions",
                "location": null,
                "status": "failed",
                "title": "should throw an error when \"use client\" is on the top level but after other expressions"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:145:7)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when \"Component\" is imported in server components",
                "location": null,
                "status": "failed",
                "title": "should throw an error when \"Component\" is imported in server components"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toInclude(expected)\n\nExpected string to include:\n  \"You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \\\"use client\\\", so they're Server Components by default.\"\nReceived:\n  \"error - [resolve] [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js  Error resolving EcmaScript Modules request\n  unable to resolve module \\\"client-only\\\"···\n  | It was not possible to find the requested file.\n  | Parsed request as written in source code: module \\\"client-only\\\"\n  | Path where resolving has started: [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js\n  | Type of request: EcmaScript Modules request\n  | Import map: No import map entry\n  |·\n\"\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:172:47)"
                ],
                "fullName": "Error overlay - RSC build errors should allow to use and handle rsc poisoning client-only",
                "location": null,
                "status": "failed",
                "title": "should allow to use and handle rsc poisoning client-only"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:196:45)"
                ],
                "fullName": "Error overlay - RSC build errors should allow to use and handle rsc poisoning server-only",
                "location": null,
                "status": "failed",
                "title": "should allow to use and handle rsc poisoning server-only"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:218:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error for invalid undefined module retuning from next dynamic",
                "location": null,
                "status": "failed",
                "title": "should error for invalid undefined module retuning from next dynamic"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:239:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when error file is a server component",
                "location": null,
                "status": "failed",
                "title": "should throw an error when error file is a server component"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:303:7)"
                ],
                "fullName": "Error overlay - RSC build errors should be possible to open the import trace files in your editor",
                "location": null,
                "status": "failed",
                "title": "should be possible to open the import trace files in your editor"
              }
            ],
            "endTime": 1676034807685,
            "message": "  ● Error overlay - RSC build errors › should throw an error when getServerSideProps is used\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      30 |       await session.patch(pageFile, uncomment)\n      31 |\n    > 32 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      33 |       expect(await session.getRedboxSource()).toInclude(\n      34 |         '\"getServerSideProps\" is not supported in app/'\n      35 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:32:45)\n\n  ● Error overlay - RSC build errors › should throw an error when getStaticProps is used\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      54 |       await next.patchFile(pageFile, content)\n      55 |\n    > 56 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      57 |       expect(await session.getRedboxSource()).toInclude(\n      58 |         '\"getStaticProps\" is not supported in app/'\n      59 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:56:45)\n\n  ● Error overlay - RSC build errors › should error for styled-jsx imports on server side\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      74 |       await session.patch(pageFile, withoutUseClient)\n      75 |\n    > 76 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      77 |       expect(await session.getRedboxSource()).toMatchInlineSnapshot(`\n      78 |         \"app/server-with-errors/styled-jsx/comp2.js\n      79 |         'client-only' cannot be imported from a Server Component module. It should only be used from a Client Component.\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:76:45)\n\n  ● Error overlay - RSC build errors › should error when page component export is not valid\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      102 |       )\n      103 |\n    > 104 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      105 |       expect(await session.getRedboxDescription()).toInclude(\n      106 |         'The default export is not a React Component in page:'\n      107 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:104:45)\n\n  ● Error overlay - RSC build errors › should throw an error when \"use client\" is on the top level but after other expressions\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      122 |       await next.patchFile(pageFile, uncomment)\n      123 |\n    > 124 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      125 |       expect(await session.getRedboxSource()).toInclude(\n      126 |         'directive must be placed before other expressions'\n      127 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:124:45)\n\n  ● Error overlay - RSC build errors › should throw an error when \"Component\" is imported in server components\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:145:7)\n\n  ● Error overlay - RSC build errors › should allow to use and handle rsc poisoning client-only\n\n    expect(received).toInclude(expected)\n\n    Expected string to include:\n      \"You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \\\"use client\\\", so they're Server Components by default.\"\n    Received:\n      \"error - [resolve] [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js  Error resolving EcmaScript Modules request\n      unable to resolve module \\\"client-only\\\"···\n      | It was not possible to find the requested file.\n      | Parsed request as written in source code: module \\\"client-only\\\"\n      | Path where resolving has started: [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js\n      | Type of request: EcmaScript Modules request\n      | Import map: No import map entry\n      |·\n    \"\n\n      170 |\n      171 |       expect(await session.hasRedbox(true)).toBe(true)\n    > 172 |       expect(await session.getRedboxSource()).toInclude(\n          |                                               ^\n      173 |         `You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \"use client\", so they're Server Components by default.`\n      174 |       )\n      175 |\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:172:47)\n\n  ● Error overlay - RSC build errors › should allow to use and handle rsc poisoning server-only\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      194 |       await session.patch(file, uncomment)\n      195 |\n    > 196 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      197 |       expect(await session.getRedboxSource()).toInclude(\n      198 |         `You're importing a component that needs server-only. That only works in a Server Component but one of its parents is marked with \"use client\", so it's a Client Component.`\n      199 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:196:45)\n\n  ● Error overlay - RSC build errors › should error for invalid undefined module retuning from next dynamic\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      216 |       )\n      217 |\n    > 218 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      219 |       expect(await session.getRedboxDescription()).toInclude(\n      220 |         `Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function.`\n      221 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:218:45)\n\n  ● Error overlay - RSC build errors › should throw an error when error file is a server component\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      237 |       )\n      238 |\n    > 239 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      240 |       expect(await session.getRedboxSource()).toMatchInlineSnapshot(`\n      241 |         \"./app/server-with-errors/error-file/error.js\n      242 |         ReactServerComponentsError:\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:239:45)\n\n  ● Error overlay - RSC build errors › should be possible to open the import trace files in your editor\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:303:7)\n",
            "name": "/work/test/development/acceptance-app/rsc-build-errors.test.ts",
            "startTime": 1676034280993,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/e2e/app-dir/app-alias/app-alias.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 3,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 3,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676035695321,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "@next/font/google with-font-declarations-file"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4\nReceived: 0\n    at Object.<anonymous> (/work/test/e2e/next-font/with-font-declarations-file.test.ts:59:43)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
                ],
                "fullName": "@next/font/google with-font-declarations-file preload correct files at /inter",
                "location": null,
                "status": "failed",
                "title": "preload correct files at /inter"
              },
              {
                "ancestorTitles": [
                  "@next/font/google with-font-declarations-file"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4\nReceived: 0\n    at Object.<anonymous> (/work/test/e2e/next-font/with-font-declarations-file.test.ts:93:43)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
                ],
                "fullName": "@next/font/google with-font-declarations-file preload correct files at /roboto",
                "location": null,
                "status": "failed",
                "title": "preload correct files at /roboto"
              },
              {
                "ancestorTitles": [
                  "@next/font/google with-font-declarations-file"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 4\nReceived: 0\n    at Object.<anonymous> (/work/test/e2e/next-font/with-font-declarations-file.test.ts:127:43)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
                ],
                "fullName": "@next/font/google with-font-declarations-file preload correct files at /local-font",
                "location": null,
                "status": "failed",
                "title": "preload correct files at /local-font"
              }
            ],
            "endTime": 1676035720396,
            "message": "  ● @next/font/google with-font-declarations-file › preload correct files at /inter\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4\n    Received: 0\n\n      57 |     if (isDev) {\n      58 |       // In dev all fonts will be preloaded since it's before DCE\n    > 59 |       expect($('link[as=\"font\"]').length).toBe(4)\n         |                                           ^\n      60 |     } else {\n      61 |       // Preload\n      62 |       expect($('link[as=\"font\"]').length).toBe(2)\n\n      at Object.<anonymous> (e2e/next-font/with-font-declarations-file.test.ts:59:43)\n\n  ● @next/font/google with-font-declarations-file › preload correct files at /roboto\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4\n    Received: 0\n\n      91 |     if (isDev) {\n      92 |       // In dev all fonts will be preloaded since it's before DCE\n    > 93 |       expect($('link[as=\"font\"]').length).toBe(4)\n         |                                           ^\n      94 |     } else {\n      95 |       // Preload\n      96 |       expect($('link[as=\"font\"]').length).toBe(2)\n\n      at Object.<anonymous> (e2e/next-font/with-font-declarations-file.test.ts:93:43)\n\n  ● @next/font/google with-font-declarations-file › preload correct files at /local-font\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 4\n    Received: 0\n\n      125 |     if (isDev) {\n      126 |       // In dev all fonts will be preloaded since it's before DCE\n    > 127 |       expect($('link[as=\"font\"]').length).toBe(4)\n          |                                           ^\n      128 |     } else {\n      129 |       // Preload\n      130 |       expect($('link[as=\"font\"]').length).toBe(2)\n\n      at Object.<anonymous> (e2e/next-font/with-font-declarations-file.test.ts:127:43)\n",
            "name": "/work/test/e2e/next-font/with-font-declarations-file.test.ts",
            "startTime": 1676035695423,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/integration/config/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 9,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 9,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676036282626,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:52:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for gsp page correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for gsp page correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at runNextTicks (node:internal/process/task_queues:61:5)\n    at processTimers (node:internal/timers:499:9)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:84:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for gssp page correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for gssp page correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:116:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for dynamic gssp page correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for dynamic gssp page correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:148:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for api route correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for api route correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:180:7)"
                ],
                "fullName": "server-side dev errors should show server-side error for dynamic api route correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for dynamic api route correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:205:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught rejection correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught rejection correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:221:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught empty rejection correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught empty rejection correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:237:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught exception correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught exception correctly"
              },
              {
                "ancestorTitles": [
                  "server-side dev errors"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\n\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/server-side-dev-errors/test/index.test.js:253:5)"
                ],
                "fullName": "server-side dev errors should show server-side error for uncaught empty exception correctly",
                "location": null,
                "status": "failed",
                "title": "should show server-side error for uncaught empty exception correctly"
              }
            ],
            "endTime": 1676036635762,
            "message": "  ● server-side dev errors › should show server-side error for gsp page correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:52:7)\n\n  ● server-side dev errors › should show server-side error for gssp page correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:84:7)\n\n  ● server-side dev errors › should show server-side error for dynamic gssp page correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:116:7)\n\n  ● server-side dev errors › should show server-side error for api route correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:148:7)\n\n  ● server-side dev errors › should show server-side error for dynamic api route correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:180:7)\n\n  ● server-side dev errors › should show server-side error for uncaught rejection correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:205:5)\n\n  ● server-side dev errors › should show server-side error for uncaught empty rejection correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:221:5)\n\n  ● server-side dev errors › should show server-side error for uncaught exception correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:237:5)\n\n  ● server-side dev errors › should show server-side error for uncaught empty exception correctly\n\n    TIMED OUT: success\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/server-side-dev-errors/test/index.test.js:253:5)\n",
            "name": "/work/test/integration/server-side-dev-errors/test/index.test.js",
            "startTime": 1676036282720,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    }
  ]
}