{
  "ref": "8498caeb6ed64b26be66e065058b2c186cf2f497",
  "nextjsVersion": "Next.js v13.1.7-canary.8",
  "result": [
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/development/acceptance-app/component-stack.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 1,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676063486567,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Error Overlay unsupported app features"
                ],
                "failureMessages": [
                  "TypeError: Cannot read properties of null (reading 'includes')\n    at _default (/work/node_modules/.pnpm/jest-extended@1.2.1/node_modules/jest-extended/dist/matchers/toInclude/predicate.js:8:46)\n    at Object.toInclude (/work/node_modules/.pnpm/jest-extended@1.2.1/node_modules/jest-extended/dist/matchers/toInclude/index.js:19:39)\n    at __EXTERNAL_MATCHER_TRAP__ (/work/node_modules/.pnpm/expect@27.5.1/node_modules/expect/build/index.js:386:30)\n    at Object.toInclude (/work/node_modules/.pnpm/expect@27.5.1/node_modules/expect/build/index.js:387:15)\n    at Object.<anonymous> (/work/test/development/acceptance-app/unsupported-app-features.test.ts:34:52)"
                ],
                "fullName": "Error Overlay unsupported app features should show error exporting AMP config in app dir",
                "location": null,
                "status": "failed",
                "title": "should show error exporting AMP config in app dir"
              }
            ],
            "endTime": 1676063553040,
            "message": "  ● Error Overlay unsupported app features › should show error exporting AMP config in app dir\n\n    TypeError: Cannot read properties of null (reading 'includes')\n\n      32 |\n      33 |       await session.hasRedbox(true)\n    > 34 |       expect(await session.getRedboxDescription()).toInclude(\n         |                                                    ^\n      35 |         'AMP is not supported in the app directory. If you need to use AMP it will continue to be supported in the pages directory.'\n      36 |       )\n      37 |\n\n      at _default (../node_modules/.pnpm/jest-extended@1.2.1/node_modules/jest-extended/dist/matchers/toInclude/predicate.js:8:46)\n      at __EXTERNAL_MATCHER_TRAP__ (../node_modules/.pnpm/expect@27.5.1/node_modules/expect/build/index.js:386:30)\n      at Object.toInclude (../node_modules/.pnpm/expect@27.5.1/node_modules/expect/build/index.js:387:15)\n      at Object.<anonymous> (development/acceptance-app/unsupported-app-features.test.ts:34:52)\n",
            "name": "/work/test/development/acceptance-app/unsupported-app-features.test.ts",
            "startTime": 1676063486664,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/e2e/middleware-matcher/index.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 8,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 8,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676064007454,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of true and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of true and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of false and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of false and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of true and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of true and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of false and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of false and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              }
            ],
            "endTime": 1676064423729,
            "message": "  ● 404-page-router with basePath of false and i18n of true and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of false and i18n of true and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of false and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of false and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of true and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of true and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of false and i18n of false and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of false and i18n of false and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n",
            "name": "/work/test/e2e/404-page-router/index.test.ts",
            "startTime": 1676064007548,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/integration/import-assertion/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 14,
        "numPassedTestSuites": 0,
        "numPassedTests": 56,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 70,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676064862862,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:99:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:129:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with query",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:153:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with hash",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:241:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle backslashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:266:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"/google.com\"\nReceived: \"/\"\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:343:62)"
                ],
                "fullName": "404 handling custom _error next dev should handle slashes in router push correctly",
                "location": null,
                "status": "failed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: /%2Fgoogle.com\n\n/\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:385:7)"
                ],
                "fullName": "404 handling custom _error next dev should have no error from encoded slashes in router push",
                "location": null,
                "status": "failed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:99:26)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:129:26)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with query",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:153:26)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with hash",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:241:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle backslashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:266:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"/google.com\"\nReceived: \"/\"\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:343:62)"
                ],
                "fullName": "404 handling pages/404 next dev should handle slashes in router push correctly",
                "location": null,
                "status": "failed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: /%2Fgoogle.com\n\n/\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:385:7)"
                ],
                "fullName": "404 handling pages/404 next dev should have no error from encoded slashes in router push",
                "location": null,
                "status": "failed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              }
            ],
            "endTime": 1676065166609,
            "message": "  ● 404 handling › custom _error › next dev › should handle double slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n       97 |         redirect: 'manual',\n       98 |       })\n    >  99 |       expect(res.status).toBe(308)\n          |                          ^\n      100 |\n      101 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      102 |       expect(parsedUrl.pathname).toBe('/google.com')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:99:26)\n\n  ● 404 handling › custom _error › next dev › should handle double slashes correctly with query\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      127 |         }\n      128 |       )\n    > 129 |       expect(res.status).toBe(308)\n          |                          ^\n      130 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      131 |       expect(parsedUrl.pathname).toBe('/google.com')\n      132 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:129:26)\n\n  ● 404 handling › custom _error › next dev › should handle double slashes correctly with hash\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      151 |         redirect: 'manual',\n      152 |       })\n    > 153 |       expect(res.status).toBe(308)\n          |                          ^\n      154 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      155 |       expect(parsedUrl.pathname).toBe('/google.com')\n      156 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:153:26)\n\n  ● 404 handling › custom _error › next dev › should handle backslashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      239 |         redirect: 'manual',\n      240 |       })\n    > 241 |       expect(res.status).toBe(308)\n          |                          ^\n      242 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      243 |       expect(parsedUrl.pathname).toBe('/google.com')\n      244 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:241:26)\n\n  ● 404 handling › custom _error › next dev › should handle mixed backslashes/forward slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      264 |         redirect: 'manual',\n      265 |       })\n    > 266 |       expect(res.status).toBe(308)\n          |                          ^\n      267 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      268 |       expect(parsedUrl.pathname).toBe(isExport ? '//google.com' : '/google.com')\n      269 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:266:26)\n\n  ● 404 handling › custom _error › next dev › should handle slashes in router push correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"/google.com\"\n    Received: \"/\"\n\n      341 |         })`\n      342 |       )\n    > 343 |       expect(await browser.eval('window.location.pathname')).toBe(item.pathname)\n          |                                                              ^\n      344 |       expect(await browser.eval('window.location.search')).toBe(\n      345 |         item.search || ''\n      346 |       )\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:343:62)\n\n  ● 404 handling › custom _error › next dev › should have no error from encoded slashes in router push\n\n    TIMED OUT: /%2Fgoogle.com\n\n    /\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:385:7)\n\n  ● 404 handling › pages/404 › next dev › should handle double slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n       97 |         redirect: 'manual',\n       98 |       })\n    >  99 |       expect(res.status).toBe(308)\n          |                          ^\n      100 |\n      101 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      102 |       expect(parsedUrl.pathname).toBe('/google.com')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:99:26)\n          at runMicrotasks (<anonymous>)\n\n  ● 404 handling › pages/404 › next dev › should handle double slashes correctly with query\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      127 |         }\n      128 |       )\n    > 129 |       expect(res.status).toBe(308)\n          |                          ^\n      130 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      131 |       expect(parsedUrl.pathname).toBe('/google.com')\n      132 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:129:26)\n          at runMicrotasks (<anonymous>)\n\n  ● 404 handling › pages/404 › next dev › should handle double slashes correctly with hash\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      151 |         redirect: 'manual',\n      152 |       })\n    > 153 |       expect(res.status).toBe(308)\n          |                          ^\n      154 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      155 |       expect(parsedUrl.pathname).toBe('/google.com')\n      156 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:153:26)\n          at runMicrotasks (<anonymous>)\n\n  ● 404 handling › pages/404 › next dev › should handle backslashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      239 |         redirect: 'manual',\n      240 |       })\n    > 241 |       expect(res.status).toBe(308)\n          |                          ^\n      242 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      243 |       expect(parsedUrl.pathname).toBe('/google.com')\n      244 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:241:26)\n\n  ● 404 handling › pages/404 › next dev › should handle mixed backslashes/forward slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      264 |         redirect: 'manual',\n      265 |       })\n    > 266 |       expect(res.status).toBe(308)\n          |                          ^\n      267 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      268 |       expect(parsedUrl.pathname).toBe(isExport ? '//google.com' : '/google.com')\n      269 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:266:26)\n\n  ● 404 handling › pages/404 › next dev › should handle slashes in router push correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"/google.com\"\n    Received: \"/\"\n\n      341 |         })`\n      342 |       )\n    > 343 |       expect(await browser.eval('window.location.pathname')).toBe(item.pathname)\n          |                                                              ^\n      344 |       expect(await browser.eval('window.location.search')).toBe(\n      345 |         item.search || ''\n      346 |       )\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:343:62)\n\n  ● 404 handling › pages/404 › next dev › should have no error from encoded slashes in router push\n\n    TIMED OUT: /%2Fgoogle.com\n\n    /\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:385:7)\n",
            "name": "/work/test/integration/repeated-slashes/test/index.test.js",
            "startTime": 1676064862956,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/development/acceptance/ReactRefreshLogBox-builtins.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 1,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676063440455,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "theme-ui SWC option"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"rgb(51, 51, 238)\"\nReceived: \"rgb(0, 0, 0)\"\n    at Object.<anonymous> (/work/test/development/basic/theme-ui.test.ts:28:21)"
                ],
                "fullName": "theme-ui SWC option should have theme provided styling",
                "location": null,
                "status": "failed",
                "title": "should have theme provided styling"
              }
            ],
            "endTime": 1676063473961,
            "message": "  ● theme-ui SWC option › should have theme provided styling\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"rgb(51, 51, 238)\"\n    Received: \"rgb(0, 0, 0)\"\n\n      26 |       browser = await webdriver(next.url, '/')\n      27 |       const color = await browser.elementByCss('#hello').getComputedCss('color')\n    > 28 |       expect(color).toBe('rgb(51, 51, 238)')\n         |                     ^\n      29 |     } finally {\n      30 |       if (browser) {\n      31 |         await browser.close()\n\n      at Object.<anonymous> (development/basic/theme-ui.test.ts:28:21)\n",
            "name": "/work/test/development/basic/theme-ui.test.ts",
            "startTime": 1676063440548,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/e2e/app-dir/app-alias/app-alias.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 3,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676064739587,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [],
                "fullName": "prerender native module should render index correctly",
                "location": null,
                "status": "passed",
                "title": "should render index correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/first correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/first correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/second correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/second correctly"
              }
            ],
            "endTime": 1676064854144,
            "message": "  ● prerender native module › should render /blog/first correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● prerender native module › should render /blog/second correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/e2e/prerender-native-module.test.ts",
            "startTime": 1676064739682,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/integration/i18n-support-custom-error/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 3,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 4,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676065463787,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [],
                "fullName": "Minimum TypeScript Warning should show warning during next build with old version",
                "location": null,
                "status": "passed",
                "title": "should show warning during next build with old version"
              },
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [
                  "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"Minimum recommended TypeScript version is\"\nReceived string:    \">>> TURBOPACK (alpha)·\nThank you for trying Next.js v13 with Turbopack! As a reminder,\nTurbopack is currently in alpha and not yet ready for production.\nWe appreciate your ongoing support as we work to make it ready\nfor everyone.·\nLearn more about Next.js v13 and Turbopack: https://nextjs.link/with-turbopack\nPlease direct feedback to: https://nextjs.link/turbopack-feedback·\ninfo  - Using locally built binary of @next/swc\nLoading custom turbopack binary from /work/next-dev\nRunning turbopack with args: [--dev /work/test/integration/typescript-version-warning/app --is-next-dev-command --port 36871 --root /work --no-open]\n\u001b[32mready\u001b[39m - started server on 0.0.0.0:36871, url: http://localhost:36871\n\u001b[35mevent\u001b[39m - initial compilation 4.924ms\n\"\n    at Object.<anonymous> (/work/test/integration/typescript-version-warning/test/index.test.js:32:20)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Minimum TypeScript Warning should show warning during next dev with old version",
                "location": null,
                "status": "failed",
                "title": "should show warning during next dev with old version"
              },
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [],
                "fullName": "Minimum TypeScript Warning should not show warning during next build with new version",
                "location": null,
                "status": "passed",
                "title": "should not show warning during next build with new version"
              },
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [],
                "fullName": "Minimum TypeScript Warning should not show warning during next dev with new version",
                "location": null,
                "status": "passed",
                "title": "should not show warning during next dev with new version"
              }
            ],
            "endTime": 1676065474713,
            "message": "  ● Minimum TypeScript Warning › should show warning during next dev with old version\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"Minimum recommended TypeScript version is\"\n    Received string:    \">>> TURBOPACK (alpha)·\n    Thank you for trying Next.js v13 with Turbopack! As a reminder,\n    Turbopack is currently in alpha and not yet ready for production.\n    We appreciate your ongoing support as we work to make it ready\n    for everyone.·\n    Learn more about Next.js v13 and Turbopack: https://nextjs.link/with-turbopack\n    Please direct feedback to: https://nextjs.link/turbopack-feedback·\n    info  - Using locally built binary of @next/swc\n    Loading custom turbopack binary from /work/next-dev\n    Running turbopack with args: [--dev /work/test/integration/typescript-version-warning/app --is-next-dev-command --port 36871 --root /work --no-open]\n    \u001b[32mready\u001b[39m - started server on 0.0.0.0:36871, url: http://localhost:36871\n    \u001b[35mevent\u001b[39m - initial compilation 4.924ms\n    \"\n\n      30 |     await killApp(app)\n      31 |\n    > 32 |     expect(output).toContain('Minimum recommended TypeScript version is')\n         |                    ^\n      33 |   })\n      34 |\n      35 |   it('should not show warning during next build with new version', async () => {\n\n      at Object.<anonymous> (integration/typescript-version-warning/test/index.test.js:32:20)\n",
            "name": "/work/test/integration/typescript-version-warning/test/index.test.js",
            "startTime": 1676065463881,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/development/acceptance-app/component-stack.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 11,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 11,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676063640834,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:32:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when getServerSideProps is used",
                "location": null,
                "status": "failed",
                "title": "should throw an error when getServerSideProps is used"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:56:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when getStaticProps is used",
                "location": null,
                "status": "failed",
                "title": "should throw an error when getStaticProps is used"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:76:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error for styled-jsx imports on server side",
                "location": null,
                "status": "failed",
                "title": "should error for styled-jsx imports on server side"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:104:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error when page component export is not valid",
                "location": null,
                "status": "failed",
                "title": "should error when page component export is not valid"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:124:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when \"use client\" is on the top level but after other expressions",
                "location": null,
                "status": "failed",
                "title": "should throw an error when \"use client\" is on the top level but after other expressions"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:145:7)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when \"Component\" is imported in server components",
                "location": null,
                "status": "failed",
                "title": "should throw an error when \"Component\" is imported in server components"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toInclude(expected)\n\nExpected string to include:\n  \"You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \\\"use client\\\", so they're Server Components by default.\"\nReceived:\n  \"error - [resolve] [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js  Error resolving EcmaScript Modules request\n  unable to resolve module \\\"client-only\\\"···\n  | It was not possible to find the requested file.\n  | Parsed request as written in source code: module \\\"client-only\\\"\n  | Path where resolving has started: [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js\n  | Type of request: EcmaScript Modules request\n  | Import map: No import map entry\n  |·\n\"\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:172:47)"
                ],
                "fullName": "Error overlay - RSC build errors should allow to use and handle rsc poisoning client-only",
                "location": null,
                "status": "failed",
                "title": "should allow to use and handle rsc poisoning client-only"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toInclude(expected)\n\nExpected string to include:\n  \"You're importing a component that needs server-only. That only works in a Server Component but one of its parents is marked with \\\"use client\\\", so it's a Client Component.\"\nReceived:\n  \"error - [resolve] [project-with-next]/app/client-with-errors/server-only-in-client/server-only-lib.js  Error resolving EcmaScript Modules request\n  unable to resolve module \\\"server-only\\\"···\n  | It was not possible to find the requested file.\n  | Parsed request as written in source code: module \\\"server-only\\\"\n  | Path where resolving has started: [project-with-next]/app/client-with-errors/server-only-in-client/server-only-lib.js\n  | Type of request: EcmaScript Modules request\n  | Import map: No import map entry\n  |·\n\"\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:197:47)"
                ],
                "fullName": "Error overlay - RSC build errors should allow to use and handle rsc poisoning server-only",
                "location": null,
                "status": "failed",
                "title": "should allow to use and handle rsc poisoning server-only"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:218:45)"
                ],
                "fullName": "Error overlay - RSC build errors should error for invalid undefined module retuning from next dynamic",
                "location": null,
                "status": "failed",
                "title": "should error for invalid undefined module retuning from next dynamic"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:239:45)"
                ],
                "fullName": "Error overlay - RSC build errors should throw an error when error file is a server component",
                "location": null,
                "status": "failed",
                "title": "should throw an error when error file is a server component"
              },
              {
                "ancestorTitles": [
                  "Error overlay - RSC build errors"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/rsc-build-errors.test.ts:303:7)"
                ],
                "fullName": "Error overlay - RSC build errors should be possible to open the import trace files in your editor",
                "location": null,
                "status": "failed",
                "title": "should be possible to open the import trace files in your editor"
              }
            ],
            "endTime": 1676064139146,
            "message": "  ● Error overlay - RSC build errors › should throw an error when getServerSideProps is used\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      30 |       await session.patch(pageFile, uncomment)\n      31 |\n    > 32 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      33 |       expect(await session.getRedboxSource()).toInclude(\n      34 |         '\"getServerSideProps\" is not supported in app/'\n      35 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:32:45)\n\n  ● Error overlay - RSC build errors › should throw an error when getStaticProps is used\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      54 |       await next.patchFile(pageFile, content)\n      55 |\n    > 56 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      57 |       expect(await session.getRedboxSource()).toInclude(\n      58 |         '\"getStaticProps\" is not supported in app/'\n      59 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:56:45)\n\n  ● Error overlay - RSC build errors › should error for styled-jsx imports on server side\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      74 |       await session.patch(pageFile, withoutUseClient)\n      75 |\n    > 76 |       expect(await session.hasRedbox(true)).toBe(true)\n         |                                             ^\n      77 |       expect(await session.getRedboxSource()).toMatchInlineSnapshot(`\n      78 |         \"app/server-with-errors/styled-jsx/comp2.js\n      79 |         'client-only' cannot be imported from a Server Component module. It should only be used from a Client Component.\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:76:45)\n\n  ● Error overlay - RSC build errors › should error when page component export is not valid\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      102 |       )\n      103 |\n    > 104 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      105 |       expect(await session.getRedboxDescription()).toInclude(\n      106 |         'The default export is not a React Component in page:'\n      107 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:104:45)\n\n  ● Error overlay - RSC build errors › should throw an error when \"use client\" is on the top level but after other expressions\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      122 |       await next.patchFile(pageFile, uncomment)\n      123 |\n    > 124 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      125 |       expect(await session.getRedboxSource()).toInclude(\n      126 |         'directive must be placed before other expressions'\n      127 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:124:45)\n\n  ● Error overlay - RSC build errors › should throw an error when \"Component\" is imported in server components\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:145:7)\n\n  ● Error overlay - RSC build errors › should allow to use and handle rsc poisoning client-only\n\n    expect(received).toInclude(expected)\n\n    Expected string to include:\n      \"You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \\\"use client\\\", so they're Server Components by default.\"\n    Received:\n      \"error - [resolve] [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js  Error resolving EcmaScript Modules request\n      unable to resolve module \\\"client-only\\\"···\n      | It was not possible to find the requested file.\n      | Parsed request as written in source code: module \\\"client-only\\\"\n      | Path where resolving has started: [project-with-next]/app/server-with-errors/client-only-in-server/client-only-lib.js\n      | Type of request: EcmaScript Modules request\n      | Import map: No import map entry\n      |·\n    \"\n\n      170 |\n      171 |       expect(await session.hasRedbox(true)).toBe(true)\n    > 172 |       expect(await session.getRedboxSource()).toInclude(\n          |                                               ^\n      173 |         `You're importing a component that imports client-only. It only works in a Client Component but none of its parents are marked with \"use client\", so they're Server Components by default.`\n      174 |       )\n      175 |\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:172:47)\n\n  ● Error overlay - RSC build errors › should allow to use and handle rsc poisoning server-only\n\n    expect(received).toInclude(expected)\n\n    Expected string to include:\n      \"You're importing a component that needs server-only. That only works in a Server Component but one of its parents is marked with \\\"use client\\\", so it's a Client Component.\"\n    Received:\n      \"error - [resolve] [project-with-next]/app/client-with-errors/server-only-in-client/server-only-lib.js  Error resolving EcmaScript Modules request\n      unable to resolve module \\\"server-only\\\"···\n      | It was not possible to find the requested file.\n      | Parsed request as written in source code: module \\\"server-only\\\"\n      | Path where resolving has started: [project-with-next]/app/client-with-errors/server-only-in-client/server-only-lib.js\n      | Type of request: EcmaScript Modules request\n      | Import map: No import map entry\n      |·\n    \"\n\n      195 |\n      196 |       expect(await session.hasRedbox(true)).toBe(true)\n    > 197 |       expect(await session.getRedboxSource()).toInclude(\n          |                                               ^\n      198 |         `You're importing a component that needs server-only. That only works in a Server Component but one of its parents is marked with \"use client\", so it's a Client Component.`\n      199 |       )\n      200 |\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:197:47)\n\n  ● Error overlay - RSC build errors › should error for invalid undefined module retuning from next dynamic\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      216 |       )\n      217 |\n    > 218 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      219 |       expect(await session.getRedboxDescription()).toInclude(\n      220 |         `Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function.`\n      221 |       )\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:218:45)\n\n  ● Error overlay - RSC build errors › should throw an error when error file is a server component\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      237 |       )\n      238 |\n    > 239 |       expect(await session.hasRedbox(true)).toBe(true)\n          |                                             ^\n      240 |       expect(await session.getRedboxSource()).toMatchInlineSnapshot(`\n      241 |         \"./app/server-with-errors/error-file/error.js\n      242 |         ReactServerComponentsError:\n\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:239:45)\n\n  ● Error overlay - RSC build errors › should be possible to open the import trace files in your editor\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/rsc-build-errors.test.ts:303:7)\n",
            "name": "/work/test/development/acceptance-app/rsc-build-errors.test.ts",
            "startTime": 1676063640931,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/e2e/middleware-matcher/index.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 8,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 8,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676064164712,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of true and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of true and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of false and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of false and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of true and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of true and i18n of true and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of false and middleware false",
                  "for /not/a/real/page?with=query"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              },
              {
                "ancestorTitles": [
                  "404-page-router with basePath of false and i18n of false and middleware false",
                  "for /not/a/real/page"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: yes\n\nnull\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/404-page-router/index.test.ts:108:11)"
                ],
                "fullName": "404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
                "location": null,
                "status": "failed",
                "title": "should have the correct router parameters after it is ready"
              }
            ],
            "endTime": 1676064591215,
            "message": "  ● 404-page-router with basePath of false and i18n of true and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of false and i18n of true and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of false and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of false and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of true and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of true and i18n of true and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of false and i18n of false and middleware false › for /not/a/real/page?with=query › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n\n  ● 404-page-router with basePath of false and i18n of false and middleware false › for /not/a/real/page › should have the correct router parameters after it is ready\n\n    TIMED OUT: yes\n\n    null\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/404-page-router/index.test.ts:108:11)\n",
            "name": "/work/test/e2e/404-page-router/index.test.ts",
            "startTime": 1676064164807,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/integration/import-assertion/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 14,
        "numPassedTestSuites": 0,
        "numPassedTests": 56,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 70,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676065096653,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:99:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:129:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with query",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:153:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with hash",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:241:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle backslashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:266:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling custom _error next dev should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error next dev should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"/google.com\"\nReceived: \"/\"\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:343:62)"
                ],
                "fullName": "404 handling custom _error next dev should handle slashes in router push correctly",
                "location": null,
                "status": "failed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: /%2Fgoogle.com\n\n/\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:385:7)"
                ],
                "fullName": "404 handling custom _error next dev should have no error from encoded slashes in router push",
                "location": null,
                "status": "failed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next start should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "custom _error",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling custom _error production next export should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:99:26)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:129:26)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with query",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:153:26)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with hash",
                "location": null,
                "status": "failed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:241:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle backslashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 404\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:266:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 handling pages/404 next dev should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "failed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 next dev should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"/google.com\"\nReceived: \"/\"\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:343:62)"
                ],
                "fullName": "404 handling pages/404 next dev should handle slashes in router push correctly",
                "location": null,
                "status": "failed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "next dev"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: /%2Fgoogle.com\n\n/\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/integration/repeated-slashes/test/index.test.js:385:7)"
                ],
                "fullName": "404 handling pages/404 next dev should have no error from encoded slashes in router push",
                "location": null,
                "status": "failed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should normalize repeated slashes in redirects correctly",
                "location": null,
                "status": "passed",
                "title": "should normalize repeated slashes in redirects correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next start"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next start should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with encoded",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with encoded and query",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and query"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle double slashes correctly with encoded and hash",
                "location": null,
                "status": "passed",
                "title": "should handle double slashes correctly with encoded and hash"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle backslashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle backslashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle mixed backslashes/forward slashes correctly",
                "location": null,
                "status": "passed",
                "title": "should handle mixed backslashes/forward slashes correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle slashes in next/link correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in next/link correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should handle slashes in router push correctly",
                "location": null,
                "status": "passed",
                "title": "should handle slashes in router push correctly"
              },
              {
                "ancestorTitles": [
                  "404 handling",
                  "pages/404",
                  "production",
                  "next export"
                ],
                "failureMessages": [],
                "fullName": "404 handling pages/404 production next export should have no error from encoded slashes in router push",
                "location": null,
                "status": "passed",
                "title": "should have no error from encoded slashes in router push"
              }
            ],
            "endTime": 1676065401095,
            "message": "  ● 404 handling › custom _error › next dev › should handle double slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n       97 |         redirect: 'manual',\n       98 |       })\n    >  99 |       expect(res.status).toBe(308)\n          |                          ^\n      100 |\n      101 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      102 |       expect(parsedUrl.pathname).toBe('/google.com')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:99:26)\n\n  ● 404 handling › custom _error › next dev › should handle double slashes correctly with query\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      127 |         }\n      128 |       )\n    > 129 |       expect(res.status).toBe(308)\n          |                          ^\n      130 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      131 |       expect(parsedUrl.pathname).toBe('/google.com')\n      132 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:129:26)\n\n  ● 404 handling › custom _error › next dev › should handle double slashes correctly with hash\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      151 |         redirect: 'manual',\n      152 |       })\n    > 153 |       expect(res.status).toBe(308)\n          |                          ^\n      154 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      155 |       expect(parsedUrl.pathname).toBe('/google.com')\n      156 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:153:26)\n\n  ● 404 handling › custom _error › next dev › should handle backslashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      239 |         redirect: 'manual',\n      240 |       })\n    > 241 |       expect(res.status).toBe(308)\n          |                          ^\n      242 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      243 |       expect(parsedUrl.pathname).toBe('/google.com')\n      244 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:241:26)\n\n  ● 404 handling › custom _error › next dev › should handle mixed backslashes/forward slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      264 |         redirect: 'manual',\n      265 |       })\n    > 266 |       expect(res.status).toBe(308)\n          |                          ^\n      267 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      268 |       expect(parsedUrl.pathname).toBe(isExport ? '//google.com' : '/google.com')\n      269 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:266:26)\n\n  ● 404 handling › custom _error › next dev › should handle slashes in router push correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"/google.com\"\n    Received: \"/\"\n\n      341 |         })`\n      342 |       )\n    > 343 |       expect(await browser.eval('window.location.pathname')).toBe(item.pathname)\n          |                                                              ^\n      344 |       expect(await browser.eval('window.location.search')).toBe(\n      345 |         item.search || ''\n      346 |       )\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:343:62)\n\n  ● 404 handling › custom _error › next dev › should have no error from encoded slashes in router push\n\n    TIMED OUT: /%2Fgoogle.com\n\n    /\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:385:7)\n\n  ● 404 handling › pages/404 › next dev › should handle double slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n       97 |         redirect: 'manual',\n       98 |       })\n    >  99 |       expect(res.status).toBe(308)\n          |                          ^\n      100 |\n      101 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      102 |       expect(parsedUrl.pathname).toBe('/google.com')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:99:26)\n          at runMicrotasks (<anonymous>)\n\n  ● 404 handling › pages/404 › next dev › should handle double slashes correctly with query\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      127 |         }\n      128 |       )\n    > 129 |       expect(res.status).toBe(308)\n          |                          ^\n      130 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      131 |       expect(parsedUrl.pathname).toBe('/google.com')\n      132 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:129:26)\n          at runMicrotasks (<anonymous>)\n\n  ● 404 handling › pages/404 › next dev › should handle double slashes correctly with hash\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      151 |         redirect: 'manual',\n      152 |       })\n    > 153 |       expect(res.status).toBe(308)\n          |                          ^\n      154 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      155 |       expect(parsedUrl.pathname).toBe('/google.com')\n      156 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:153:26)\n          at runMicrotasks (<anonymous>)\n\n  ● 404 handling › pages/404 › next dev › should handle backslashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      239 |         redirect: 'manual',\n      240 |       })\n    > 241 |       expect(res.status).toBe(308)\n          |                          ^\n      242 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      243 |       expect(parsedUrl.pathname).toBe('/google.com')\n      244 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:241:26)\n\n  ● 404 handling › pages/404 › next dev › should handle mixed backslashes/forward slashes correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 404\n\n      264 |         redirect: 'manual',\n      265 |       })\n    > 266 |       expect(res.status).toBe(308)\n          |                          ^\n      267 |       const parsedUrl = url.parse(res.headers.get('location'), true)\n      268 |       expect(parsedUrl.pathname).toBe(isExport ? '//google.com' : '/google.com')\n      269 |       expect(parsedUrl.hostname).toBe('localhost')\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:266:26)\n\n  ● 404 handling › pages/404 › next dev › should handle slashes in router push correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"/google.com\"\n    Received: \"/\"\n\n      341 |         })`\n      342 |       )\n    > 343 |       expect(await browser.eval('window.location.pathname')).toBe(item.pathname)\n          |                                                              ^\n      344 |       expect(await browser.eval('window.location.search')).toBe(\n      345 |         item.search || ''\n      346 |       )\n\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:343:62)\n\n  ● 404 handling › pages/404 › next dev › should have no error from encoded slashes in router push\n\n    TIMED OUT: /%2Fgoogle.com\n\n    /\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (integration/repeated-slashes/test/index.test.js:385:7)\n",
            "name": "/work/test/integration/repeated-slashes/test/index.test.js",
            "startTime": 1676065096748,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/development/acceptance/ReactRefreshLogBox-builtins.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 1,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676063485023,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "theme-ui SWC option"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"rgb(51, 51, 238)\"\nReceived: \"rgb(0, 0, 0)\"\n    at Object.<anonymous> (/work/test/development/basic/theme-ui.test.ts:28:21)"
                ],
                "fullName": "theme-ui SWC option should have theme provided styling",
                "location": null,
                "status": "failed",
                "title": "should have theme provided styling"
              }
            ],
            "endTime": 1676063519668,
            "message": "  ● theme-ui SWC option › should have theme provided styling\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"rgb(51, 51, 238)\"\n    Received: \"rgb(0, 0, 0)\"\n\n      26 |       browser = await webdriver(next.url, '/')\n      27 |       const color = await browser.elementByCss('#hello').getComputedCss('color')\n    > 28 |       expect(color).toBe('rgb(51, 51, 238)')\n         |                     ^\n      29 |     } finally {\n      30 |       if (browser) {\n      31 |         await browser.close()\n\n      at Object.<anonymous> (development/basic/theme-ui.test.ts:28:21)\n",
            "name": "/work/test/development/basic/theme-ui.test.ts",
            "startTime": 1676063485117,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/e2e/app-dir/app-alias/app-alias.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 2,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 3,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676064801807,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [],
                "fullName": "prerender native module should render index correctly",
                "location": null,
                "status": "passed",
                "title": "should render index correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/first correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/first correctly"
              },
              {
                "ancestorTitles": [
                  "prerender native module"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#blog')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "prerender native module should render /blog/second correctly",
                "location": null,
                "status": "failed",
                "title": "should render /blog/second correctly"
              }
            ],
            "endTime": 1676064917237,
            "message": "  ● prerender native module › should render /blog/first correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● prerender native module › should render /blog/second correctly\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#blog')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/e2e/prerender-native-module.test.ts",
            "startTime": 1676064801906,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/integration/i18n-support-custom-error/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 3,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 4,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1676065536745,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [],
                "fullName": "Minimum TypeScript Warning should show warning during next build with old version",
                "location": null,
                "status": "passed",
                "title": "should show warning during next build with old version"
              },
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [
                  "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"Minimum recommended TypeScript version is\"\nReceived string:    \">>> TURBOPACK (alpha)·\nThank you for trying Next.js v13 with Turbopack! As a reminder,\nTurbopack is currently in alpha and not yet ready for production.\nWe appreciate your ongoing support as we work to make it ready\nfor everyone.·\nLearn more about Next.js v13 and Turbopack: https://nextjs.link/with-turbopack\nPlease direct feedback to: https://nextjs.link/turbopack-feedback·\ninfo  - Using locally built binary of @next/swc\nLoading custom turbopack binary from /work/next-dev\nRunning turbopack with args: [--dev /work/test/integration/typescript-version-warning/app --is-next-dev-command --port 39271 --root /work --no-open]\n\u001b[32mready\u001b[39m - started server on 0.0.0.0:39271, url: http://localhost:39271\n\u001b[35mevent\u001b[39m - initial compilation 5.787ms\n\"\n    at Object.<anonymous> (/work/test/integration/typescript-version-warning/test/index.test.js:32:20)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Minimum TypeScript Warning should show warning during next dev with old version",
                "location": null,
                "status": "failed",
                "title": "should show warning during next dev with old version"
              },
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [],
                "fullName": "Minimum TypeScript Warning should not show warning during next build with new version",
                "location": null,
                "status": "passed",
                "title": "should not show warning during next build with new version"
              },
              {
                "ancestorTitles": [
                  "Minimum TypeScript Warning"
                ],
                "failureMessages": [],
                "fullName": "Minimum TypeScript Warning should not show warning during next dev with new version",
                "location": null,
                "status": "passed",
                "title": "should not show warning during next dev with new version"
              }
            ],
            "endTime": 1676065547940,
            "message": "  ● Minimum TypeScript Warning › should show warning during next dev with old version\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"Minimum recommended TypeScript version is\"\n    Received string:    \">>> TURBOPACK (alpha)·\n    Thank you for trying Next.js v13 with Turbopack! As a reminder,\n    Turbopack is currently in alpha and not yet ready for production.\n    We appreciate your ongoing support as we work to make it ready\n    for everyone.·\n    Learn more about Next.js v13 and Turbopack: https://nextjs.link/with-turbopack\n    Please direct feedback to: https://nextjs.link/turbopack-feedback·\n    info  - Using locally built binary of @next/swc\n    Loading custom turbopack binary from /work/next-dev\n    Running turbopack with args: [--dev /work/test/integration/typescript-version-warning/app --is-next-dev-command --port 39271 --root /work --no-open]\n    \u001b[32mready\u001b[39m - started server on 0.0.0.0:39271, url: http://localhost:39271\n    \u001b[35mevent\u001b[39m - initial compilation 5.787ms\n    \"\n\n      30 |     await killApp(app)\n      31 |\n    > 32 |     expect(output).toContain('Minimum recommended TypeScript version is')\n         |                    ^\n      33 |   })\n      34 |\n      35 |   it('should not show warning during next build with new version', async () => {\n\n      at Object.<anonymous> (integration/typescript-version-warning/test/index.test.js:32:20)\n",
            "name": "/work/test/integration/typescript-version-warning/test/index.test.js",
            "startTime": 1676065536837,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    }
  ]
}