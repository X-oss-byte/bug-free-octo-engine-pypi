{
  "ref": "b1d013abdb539f52f41cd3e09a5a91ffb2175ce8",
  "nextjsVersion": "Next.js v13.1.7-canary.4",
  "result": [
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/development/acceptance-app/component-stack.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 1,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463501449,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Component Stack in error overlay"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-toast]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "Component Stack in error overlay should show a component stack on hydration error",
                "location": null,
                "status": "failed",
                "title": "should show a component stack on hydration error"
              }
            ],
            "endTime": 1675463547301,
            "message": "  ● Component Stack in error overlay › should show a component stack on hydration error\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-toast]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/development/acceptance-app/component-stack.test.ts",
            "startTime": 1675463501550,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/e2e/404-page-router/index.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 6,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 7,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463571951,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [],
                "fullName": "manual-client-base-path should not warn for flag in output",
                "location": null,
                "status": "passed",
                "title": "should not warn for flag in output"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /another",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /another"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /dynamic/first",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /dynamic/first"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /dynamic/second",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /dynamic/second"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#to-another')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:146:5)"
                ],
                "fullName": "manual-client-base-path should navigate correctly from index",
                "location": null,
                "status": "failed",
                "title": "should navigate correctly from index"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#to-index')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:185:5)"
                ],
                "fullName": "manual-client-base-path should navigate correctly from another",
                "location": null,
                "status": "failed",
                "title": "should navigate correctly from another"
              }
            ],
            "endTime": 1675463892682,
            "message": "  ● manual-client-base-path › should not update with basePath on mount /\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should not update with basePath on mount /another\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should not update with basePath on mount /dynamic/first\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should not update with basePath on mount /dynamic/second\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should navigate correctly from index\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#to-another')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:146:5)\n\n  ● manual-client-base-path › should navigate correctly from another\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#to-index')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:185:5)\n",
            "name": "/work/test/e2e/manual-client-base-path/index.test.ts",
            "startTime": 1675463572048,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 1)",
      "name": "test/integration/404-page-app/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 4,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 5,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675464211934,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode should build successfully",
                "location": null,
                "status": "passed",
                "title": "should build successfully"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode should not output static 404 if _app has getInitialProps",
                "location": null,
                "status": "passed",
                "title": "should not output static 404 if _app has getInitialProps"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode specify to use the 404 page still in the routes-manifest",
                "location": null,
                "status": "passed",
                "title": "specify to use the 404 page still in the routes-manifest"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode should still use 404 page",
                "location": null,
                "status": "passed",
                "title": "should still use 404 page"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 500\n    at Object.<anonymous> (/work/test/integration/404-page-app/test/index.test.js:81:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 Page Support with _app dev mode should not show pages/404 GIP error if _app has GIP",
                "location": null,
                "status": "failed",
                "title": "should not show pages/404 GIP error if _app has GIP"
              }
            ],
            "endTime": 1675464222522,
            "message": "  ● 404 Page Support with _app › dev mode › should not show pages/404 GIP error if _app has GIP\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 500\n\n      79 |     it('should not show pages/404 GIP error if _app has GIP', async () => {\n      80 |       const res = await fetchViaHTTP(appPort, '/abc')\n    > 81 |       expect(res.status).toBe(404)\n         |                          ^\n      82 |       const $ = cheerio.load(await res.text())\n      83 |       expect($('#404-title').text()).toBe('Hi There')\n      84 |       expect(stderr).not.toMatch(gip404Err)\n\n      at Object.<anonymous> (integration/404-page-app/test/index.test.js:81:26)\n",
            "name": "/work/test/integration/404-page-app/test/index.test.js",
            "startTime": 1675464212036,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/development/acceptance/ReactRefreshRegression.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 9,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 9,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 18,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463593114,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay can recover from a syntax error without losing state",
                "location": null,
                "status": "pending",
                "title": "can recover from a syntax error without losing state"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay client component can recover from syntax error",
                "location": null,
                "status": "pending",
                "title": "client component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay server component can recover from syntax error",
                "location": null,
                "status": "pending",
                "title": "server component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay can recover from a event handler error",
                "location": null,
                "status": "pending",
                "title": "can recover from a event handler error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay client component can recover from a component error",
                "location": null,
                "status": "pending",
                "title": "client component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay server component can recover from a component error",
                "location": null,
                "status": "pending",
                "title": "server component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay syntax > runtime error",
                "location": null,
                "status": "pending",
                "title": "syntax > runtime error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay stuck error",
                "location": null,
                "status": "pending",
                "title": "stuck error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay render error not shown right after syntax error",
                "location": null,
                "status": "pending",
                "title": "render error not shown right after syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:25:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay can recover from a syntax error without losing state",
                "location": null,
                "status": "failed",
                "title": "can recover from a syntax error without losing state"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:96:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay client component can recover from syntax error",
                "location": null,
                "status": "failed",
                "title": "client component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:96:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay server component can recover from syntax error",
                "location": null,
                "status": "failed",
                "title": "server component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:123:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay can recover from a event handler error",
                "location": null,
                "status": "failed",
                "title": "can recover from a event handler error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:226:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay client component can recover from a component error",
                "location": null,
                "status": "failed",
                "title": "client component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:226:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay server component can recover from a component error",
                "location": null,
                "status": "failed",
                "title": "server component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:286:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay syntax > runtime error",
                "location": null,
                "status": "failed",
                "title": "syntax > runtime error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:352:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay stuck error",
                "location": null,
                "status": "failed",
                "title": "stuck error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:417:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay render error not shown right after syntax error",
                "location": null,
                "status": "failed",
                "title": "render error not shown right after syntax error"
              }
            ],
            "endTime": 1675463903782,
            "message": "  ● Error recovery app turbo › Error recovery with overlay › can recover from a syntax error without losing state\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:25:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › client component can recover from syntax error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:96:13\n\n  ● Error recovery app turbo › Error recovery with overlay › server component can recover from syntax error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:96:13\n\n  ● Error recovery app turbo › Error recovery with overlay › can recover from a event handler error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:123:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › client component can recover from a component error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:226:13\n\n  ● Error recovery app turbo › Error recovery with overlay › server component can recover from a component error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:226:13\n\n  ● Error recovery app turbo › Error recovery with overlay › syntax > runtime error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:286:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › stuck error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:352:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › render error not shown right after syntax error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:417:11)\n",
            "name": "/work/test/development/acceptance-app/error-recovery.test.ts",
            "startTime": 1675463593204,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/e2e/app-dir/app-alias/app-alias.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 4,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 4,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463987733,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 500\n    at Object.<anonymous> (/work/test/e2e/app-dir/asset-prefix/asset-prefix.test.ts:14:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "app-dir assetPrefix handling should redirect route when requesting it directly",
                "location": null,
                "status": "failed",
                "title": "should redirect route when requesting it directly"
              },
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"/a\"\nReceived: undefined\n    at Object.<anonymous> (/work/test/e2e/app-dir/asset-prefix/asset-prefix.test.ts:20:54)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "app-dir assetPrefix handling should render link",
                "location": null,
                "status": "failed",
                "title": "should render link"
              },
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#a-page')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "app-dir assetPrefix handling should redirect route when requesting it directly by browser",
                "location": null,
                "status": "failed",
                "title": "should redirect route when requesting it directly by browser"
              },
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#to-a-trailing-slash')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "app-dir assetPrefix handling should redirect route when clicking link",
                "location": null,
                "status": "failed",
                "title": "should redirect route when clicking link"
              }
            ],
            "endTime": 1675464065263,
            "message": "  ● app-dir assetPrefix handling › should redirect route when requesting it directly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 500\n\n      12 |         redirect: 'manual',\n      13 |       })\n    > 14 |       expect(res.status).toBe(308)\n         |                          ^\n      15 |       expect(res.headers.get('location')).toBe(next.url + '/a')\n      16 |     })\n      17 |\n\n      at Object.<anonymous> (e2e/app-dir/asset-prefix/asset-prefix.test.ts:14:26)\n\n  ● app-dir assetPrefix handling › should render link\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"/a\"\n    Received: undefined\n\n      18 |     it('should render link', async () => {\n      19 |       const $ = await next.render$('/')\n    > 20 |       expect($('#to-a-trailing-slash').attr('href')).toBe('/a')\n         |                                                      ^\n      21 |     })\n      22 |\n      23 |     it('should redirect route when requesting it directly by browser', async () => {\n\n      at Object.<anonymous> (e2e/app-dir/asset-prefix/asset-prefix.test.ts:20:54)\n\n  ● app-dir assetPrefix handling › should redirect route when requesting it directly by browser\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#a-page')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● app-dir assetPrefix handling › should redirect route when clicking link\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#to-a-trailing-slash')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/e2e/app-dir/asset-prefix/asset-prefix.test.ts",
            "startTime": 1675463987853,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (16, 2)",
      "name": "test/integration/404-page-custom-error/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 3,
        "numPassedTestSuites": 0,
        "numPassedTests": 6,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 9,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675464109687,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should build successfully",
                "location": null,
                "status": "passed",
                "title": "should build successfully"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should respond to 404 correctly",
                "location": null,
                "status": "passed",
                "title": "should respond to 404 correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should render error correctly",
                "location": null,
                "status": "passed",
                "title": "should render error correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should render index page normal",
                "location": null,
                "status": "passed",
                "title": "should render index page normal"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should set pages404 in routes-manifest correctly",
                "location": null,
                "status": "passed",
                "title": "should set pages404 in routes-manifest correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should have output 404.html",
                "location": null,
                "status": "passed",
                "title": "should have output 404.html"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 500\n    at Object.<anonymous> (/work/test/integration/404-page-custom-error/test/index.test.js:26:24)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Default 404 Page with custom _error dev mode should respond to 404 correctly",
                "location": null,
                "status": "failed",
                "title": "should respond to 404 correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"oops\"\nReceived string:    \"Execution of get_from_source failed·\nCaused by:\n    0: Execution of resolve_source_request failed\n    1: Execution of CombinedContentSource::get failed\n    2: Execution of create_app_source failed\n    3: Execution of load_next_config failed\n    4: Execution of evaluate failed\n    5: Execution of get_evaluate_pool failed\n    6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n    7: Execution of turbopack_core::asset::AssetContentVc::write failed\n    8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n    9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n   10: Execution of content_from_relative_path failed\n   11: failed to canonicalize embedded file path\n   12: No such file or directory (os error 2)\"\n    at Object.<anonymous> (/work/test/integration/404-page-custom-error/test/index.test.js:32:18)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Default 404 Page with custom _error dev mode should render error correctly",
                "location": null,
                "status": "failed",
                "title": "should render error correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"hello from index\"\nReceived string:    \"Execution of get_from_source failed·\nCaused by:\n    0: Execution of resolve_source_request failed\n    1: Execution of CombinedContentSource::get failed\n    2: Execution of create_app_source failed\n    3: Execution of load_next_config failed\n    4: Execution of evaluate failed\n    5: Execution of get_evaluate_pool failed\n    6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n    7: Execution of turbopack_core::asset::AssetContentVc::write failed\n    8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n    9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n   10: Execution of content_from_relative_path failed\n   11: failed to canonicalize embedded file path\n   12: No such file or directory (os error 2)\"\n    at Object.<anonymous> (/work/test/integration/404-page-custom-error/test/index.test.js:37:18)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Default 404 Page with custom _error dev mode should render index page normal",
                "location": null,
                "status": "failed",
                "title": "should render index page normal"
              }
            ],
            "endTime": 1675464119676,
            "message": "  ● Default 404 Page with custom _error › dev mode › should respond to 404 correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 500\n\n      24 |   it('should respond to 404 correctly', async () => {\n      25 |     const res = await fetchViaHTTP(appPort, '/404')\n    > 26 |     expect(res.status).toBe(404)\n         |                        ^\n      27 |     expect(await res.text()).toContain('This page could not be found')\n      28 |   })\n      29 |\n\n      at Object.<anonymous> (integration/404-page-custom-error/test/index.test.js:26:24)\n\n  ● Default 404 Page with custom _error › dev mode › should render error correctly\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"oops\"\n    Received string:    \"Execution of get_from_source failed·\n    Caused by:\n        0: Execution of resolve_source_request failed\n        1: Execution of CombinedContentSource::get failed\n        2: Execution of create_app_source failed\n        3: Execution of load_next_config failed\n        4: Execution of evaluate failed\n        5: Execution of get_evaluate_pool failed\n        6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n        7: Execution of turbopack_core::asset::AssetContentVc::write failed\n        8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n        9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n       10: Execution of content_from_relative_path failed\n       11: failed to canonicalize embedded file path\n       12: No such file or directory (os error 2)\"\n\n      30 |   it('should render error correctly', async () => {\n      31 |     const text = await renderViaHTTP(appPort, '/err')\n    > 32 |     expect(text).toContain(isDev ? 'oops' : 'Internal Server Error')\n         |                  ^\n      33 |   })\n      34 |\n      35 |   it('should render index page normal', async () => {\n\n      at Object.<anonymous> (integration/404-page-custom-error/test/index.test.js:32:18)\n\n  ● Default 404 Page with custom _error › dev mode › should render index page normal\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"hello from index\"\n    Received string:    \"Execution of get_from_source failed·\n    Caused by:\n        0: Execution of resolve_source_request failed\n        1: Execution of CombinedContentSource::get failed\n        2: Execution of create_app_source failed\n        3: Execution of load_next_config failed\n        4: Execution of evaluate failed\n        5: Execution of get_evaluate_pool failed\n        6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n        7: Execution of turbopack_core::asset::AssetContentVc::write failed\n        8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n        9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n       10: Execution of content_from_relative_path failed\n       11: failed to canonicalize embedded file path\n       12: No such file or directory (os error 2)\"\n\n      35 |   it('should render index page normal', async () => {\n      36 |     const html = await renderViaHTTP(appPort, '/')\n    > 37 |     expect(html).toContain('hello from index')\n         |                  ^\n      38 |   })\n      39 |\n      40 |   if (!isDev) {\n\n      at Object.<anonymous> (integration/404-page-custom-error/test/index.test.js:37:18)\n",
            "name": "/work/test/integration/404-page-custom-error/test/index.test.js",
            "startTime": 1675464109781,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/development/acceptance-app/component-stack.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 1,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463456751,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Component Stack in error overlay"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('[data-nextjs-toast]')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "Component Stack in error overlay should show a component stack on hydration error",
                "location": null,
                "status": "failed",
                "title": "should show a component stack on hydration error"
              }
            ],
            "endTime": 1675463501972,
            "message": "  ● Component Stack in error overlay › should show a component stack on hydration error\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('[data-nextjs-toast]')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/development/acceptance-app/component-stack.test.ts",
            "startTime": 1675463456846,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/e2e/404-page-router/index.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 6,
        "numPassedTestSuites": 0,
        "numPassedTests": 1,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 7,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463526267,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [],
                "fullName": "manual-client-base-path should not warn for flag in output",
                "location": null,
                "status": "passed",
                "title": "should not warn for flag in output"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /another",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /another"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /dynamic/first",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /dynamic/first"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "Error: TIMED OUT: success\n\nundefined\n    at check (/work/test/lib/next-test-utils.js:561:11)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at processTimers (node:internal/timers:509:9)\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:121:7)"
                ],
                "fullName": "manual-client-base-path should not update with basePath on mount /dynamic/second",
                "location": null,
                "status": "failed",
                "title": "should not update with basePath on mount /dynamic/second"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#to-another')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:146:5)"
                ],
                "fullName": "manual-client-base-path should navigate correctly from index",
                "location": null,
                "status": "failed",
                "title": "should navigate correctly from index"
              },
              {
                "ancestorTitles": [
                  "manual-client-base-path"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#to-index')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10\n    at Object.<anonymous> (/work/test/e2e/manual-client-base-path/index.test.ts:185:5)"
                ],
                "fullName": "manual-client-base-path should navigate correctly from another",
                "location": null,
                "status": "failed",
                "title": "should navigate correctly from another"
              }
            ],
            "endTime": 1675463845814,
            "message": "  ● manual-client-base-path › should not update with basePath on mount /\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should not update with basePath on mount /another\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should not update with basePath on mount /dynamic/first\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should not update with basePath on mount /dynamic/second\n\n    TIMED OUT: success\n\n    undefined\n\n      559 |\n      560 |   if (hardError) {\n    > 561 |     throw new Error('TIMED OUT: ' + regex + '\\n\\n' + content)\n          |           ^\n      562 |   }\n      563 |   return false\n      564 | }\n\n      at check (lib/next-test-utils.js:561:11)\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:121:7)\n\n  ● manual-client-base-path › should navigate correctly from index\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#to-another')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:146:5)\n\n  ● manual-client-base-path › should navigate correctly from another\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#to-index')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n      at Object.<anonymous> (e2e/manual-client-base-path/index.test.ts:185:5)\n",
            "name": "/work/test/e2e/manual-client-base-path/index.test.ts",
            "startTime": 1675463526360,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 1)",
      "name": "test/integration/404-page-app/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 1,
        "numPassedTestSuites": 0,
        "numPassedTests": 4,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 5,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675464157037,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode should build successfully",
                "location": null,
                "status": "passed",
                "title": "should build successfully"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode should not output static 404 if _app has getInitialProps",
                "location": null,
                "status": "passed",
                "title": "should not output static 404 if _app has getInitialProps"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode specify to use the 404 page still in the routes-manifest",
                "location": null,
                "status": "passed",
                "title": "specify to use the 404 page still in the routes-manifest"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "production mode"
                ],
                "failureMessages": [],
                "fullName": "404 Page Support with _app production mode should still use 404 page",
                "location": null,
                "status": "passed",
                "title": "should still use 404 page"
              },
              {
                "ancestorTitles": [
                  "404 Page Support with _app",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 500\n    at Object.<anonymous> (/work/test/integration/404-page-app/test/index.test.js:81:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "404 Page Support with _app dev mode should not show pages/404 GIP error if _app has GIP",
                "location": null,
                "status": "failed",
                "title": "should not show pages/404 GIP error if _app has GIP"
              }
            ],
            "endTime": 1675464166732,
            "message": "  ● 404 Page Support with _app › dev mode › should not show pages/404 GIP error if _app has GIP\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 500\n\n      79 |     it('should not show pages/404 GIP error if _app has GIP', async () => {\n      80 |       const res = await fetchViaHTTP(appPort, '/abc')\n    > 81 |       expect(res.status).toBe(404)\n         |                          ^\n      82 |       const $ = cheerio.load(await res.text())\n      83 |       expect($('#404-title').text()).toBe('Hi There')\n      84 |       expect(stderr).not.toMatch(gip404Err)\n\n      at Object.<anonymous> (integration/404-page-app/test/index.test.js:81:26)\n",
            "name": "/work/test/integration/404-page-app/test/index.test.js",
            "startTime": 1675464157133,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/development/acceptance/ReactRefreshRegression.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 9,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 9,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 18,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463421209,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay can recover from a syntax error without losing state",
                "location": null,
                "status": "pending",
                "title": "can recover from a syntax error without losing state"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay client component can recover from syntax error",
                "location": null,
                "status": "pending",
                "title": "client component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay server component can recover from syntax error",
                "location": null,
                "status": "pending",
                "title": "server component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay can recover from a event handler error",
                "location": null,
                "status": "pending",
                "title": "can recover from a event handler error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay client component can recover from a component error",
                "location": null,
                "status": "pending",
                "title": "client component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay server component can recover from a component error",
                "location": null,
                "status": "pending",
                "title": "server component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay syntax > runtime error",
                "location": null,
                "status": "pending",
                "title": "syntax > runtime error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay stuck error",
                "location": null,
                "status": "pending",
                "title": "stuck error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app default",
                  "Error recovery with overlay"
                ],
                "failureMessages": [],
                "fullName": "Error recovery app default Error recovery with overlay render error not shown right after syntax error",
                "location": null,
                "status": "pending",
                "title": "render error not shown right after syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:25:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay can recover from a syntax error without losing state",
                "location": null,
                "status": "failed",
                "title": "can recover from a syntax error without losing state"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:96:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay client component can recover from syntax error",
                "location": null,
                "status": "failed",
                "title": "client component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:96:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay server component can recover from syntax error",
                "location": null,
                "status": "failed",
                "title": "server component can recover from syntax error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:123:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay can recover from a event handler error",
                "location": null,
                "status": "failed",
                "title": "can recover from a event handler error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:226:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay client component can recover from a component error",
                "location": null,
                "status": "failed",
                "title": "client component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at /work/test/development/acceptance-app/error-recovery.test.ts:226:13"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay server component can recover from a component error",
                "location": null,
                "status": "failed",
                "title": "server component can recover from a component error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:286:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay syntax > runtime error",
                "location": null,
                "status": "failed",
                "title": "syntax > runtime error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:352:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay stuck error",
                "location": null,
                "status": "failed",
                "title": "stuck error"
              },
              {
                "ancestorTitles": [
                  "Error recovery app turbo",
                  "Error recovery with overlay"
                ],
                "failureMessages": [
                  "Error: Application is in inconsistent state: timeout.\n    at Object.patch (/work/test/development/acceptance-app/helpers.ts:78:19)\n    at Object.<anonymous> (/work/test/development/acceptance-app/error-recovery.test.ts:417:11)"
                ],
                "fullName": "Error recovery app turbo Error recovery with overlay render error not shown right after syntax error",
                "location": null,
                "status": "failed",
                "title": "render error not shown right after syntax error"
              }
            ],
            "endTime": 1675463733953,
            "message": "  ● Error recovery app turbo › Error recovery with overlay › can recover from a syntax error without losing state\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:25:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › client component can recover from syntax error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:96:13\n\n  ● Error recovery app turbo › Error recovery with overlay › server component can recover from syntax error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:96:13\n\n  ● Error recovery app turbo › Error recovery with overlay › can recover from a event handler error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:123:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › client component can recover from a component error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:226:13\n\n  ● Error recovery app turbo › Error recovery with overlay › server component can recover from a component error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at development/acceptance-app/error-recovery.test.ts:226:13\n\n  ● Error recovery app turbo › Error recovery with overlay › syntax > runtime error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:286:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › stuck error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:352:11)\n\n  ● Error recovery app turbo › Error recovery with overlay › render error not shown right after syntax error\n\n    Application is in inconsistent state: timeout.\n\n      76 |           }\n      77 |           if (status !== 'pending') {\n    > 78 |             throw new Error(`Application is in inconsistent state: ${status}.`)\n         |                   ^\n      79 |           }\n      80 |\n      81 |           await new Promise((resolve) => setTimeout(resolve, 30))\n\n      at Object.patch (development/acceptance-app/helpers.ts:78:19)\n      at Object.<anonymous> (development/acceptance-app/error-recovery.test.ts:417:11)\n",
            "name": "/work/test/development/acceptance-app/error-recovery.test.ts",
            "startTime": 1675463421322,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/e2e/app-dir/app-alias/app-alias.test.ts",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 4,
        "numPassedTestSuites": 0,
        "numPassedTests": 0,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 4,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463824262,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 308\nReceived: 500\n    at Object.<anonymous> (/work/test/e2e/app-dir/asset-prefix/asset-prefix.test.ts:14:26)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
                ],
                "fullName": "app-dir assetPrefix handling should redirect route when requesting it directly",
                "location": null,
                "status": "failed",
                "title": "should redirect route when requesting it directly"
              },
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"/a\"\nReceived: undefined\n    at Object.<anonymous> (/work/test/e2e/app-dir/asset-prefix/asset-prefix.test.ts:20:54)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
                ],
                "fullName": "app-dir assetPrefix handling should render link",
                "location": null,
                "status": "failed",
                "title": "should render link"
              },
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#a-page')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "app-dir assetPrefix handling should redirect route when requesting it directly by browser",
                "location": null,
                "status": "failed",
                "title": "should redirect route when requesting it directly by browser"
              },
              {
                "ancestorTitles": [
                  "app-dir assetPrefix handling"
                ],
                "failureMessages": [
                  "page.waitForSelector: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator('#to-a-trailing-slash')\n============================================================\n    at /work/test/lib/browsers/playwright.ts:331:10"
                ],
                "fullName": "app-dir assetPrefix handling should redirect route when clicking link",
                "location": null,
                "status": "failed",
                "title": "should redirect route when clicking link"
              }
            ],
            "endTime": 1675463901916,
            "message": "  ● app-dir assetPrefix handling › should redirect route when requesting it directly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 308\n    Received: 500\n\n      12 |         redirect: 'manual',\n      13 |       })\n    > 14 |       expect(res.status).toBe(308)\n         |                          ^\n      15 |       expect(res.headers.get('location')).toBe(next.url + '/a')\n      16 |     })\n      17 |\n\n      at Object.<anonymous> (e2e/app-dir/asset-prefix/asset-prefix.test.ts:14:26)\n\n  ● app-dir assetPrefix handling › should render link\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"/a\"\n    Received: undefined\n\n      18 |     it('should render link', async () => {\n      19 |       const $ = await next.render$('/')\n    > 20 |       expect($('#to-a-trailing-slash').attr('href')).toBe('/a')\n         |                                                      ^\n      21 |     })\n      22 |\n      23 |     it('should redirect route when requesting it directly by browser', async () => {\n\n      at Object.<anonymous> (e2e/app-dir/asset-prefix/asset-prefix.test.ts:20:54)\n\n  ● app-dir assetPrefix handling › should redirect route when requesting it directly by browser\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#a-page')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n\n  ● app-dir assetPrefix handling › should redirect route when clicking link\n\n    page.waitForSelector: Timeout 30000ms exceeded.\n    =========================== logs ===========================\n    waiting for locator('#to-a-trailing-slash')\n    ============================================================\n\n      329 |     return this.chain(() => {\n      330 |       return page\n    > 331 |         .waitForSelector(selector, { timeout, state: 'attached' })\n          |          ^\n      332 |         .then(async (el) => {\n      333 |           // it seems selenium waits longer and tests rely on this behavior\n      334 |           // so we wait for the load event fire before returning\n\n      at lib/browsers/playwright.ts:331:10\n",
            "name": "/work/test/e2e/app-dir/asset-prefix/asset-prefix.test.ts",
            "startTime": 1675463824393,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    },
    {
      "job": "Execute Next.js integration workflow / Next.js integration test (18, 2)",
      "name": "test/integration/404-page-custom-error/test/index.test.js",
      "data": {
        "numFailedTestSuites": 1,
        "numFailedTests": 3,
        "numPassedTestSuites": 0,
        "numPassedTests": 6,
        "numPendingTestSuites": 0,
        "numPendingTests": 0,
        "numRuntimeErrorTestSuites": 0,
        "numTodoTests": 0,
        "numTotalTestSuites": 1,
        "numTotalTests": 9,
        "openHandles": [],
        "snapshot": {
          "added": 0,
          "didUpdate": false,
          "failure": false,
          "filesAdded": 0,
          "filesRemoved": 0,
          "filesRemovedList": [],
          "filesUnmatched": 0,
          "filesUpdated": 0,
          "matched": 0,
          "total": 0,
          "unchecked": 0,
          "uncheckedKeysByFile": [],
          "unmatched": 0,
          "updated": 0
        },
        "startTime": 1675463948984,
        "success": false,
        "testResults": [
          {
            "assertionResults": [
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should build successfully",
                "location": null,
                "status": "passed",
                "title": "should build successfully"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should respond to 404 correctly",
                "location": null,
                "status": "passed",
                "title": "should respond to 404 correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should render error correctly",
                "location": null,
                "status": "passed",
                "title": "should render error correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should render index page normal",
                "location": null,
                "status": "passed",
                "title": "should render index page normal"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should set pages404 in routes-manifest correctly",
                "location": null,
                "status": "passed",
                "title": "should set pages404 in routes-manifest correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "server mode"
                ],
                "failureMessages": [],
                "fullName": "Default 404 Page with custom _error server mode should have output 404.html",
                "location": null,
                "status": "passed",
                "title": "should have output 404.html"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 500\n    at Object.<anonymous> (/work/test/integration/404-page-custom-error/test/index.test.js:26:24)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Default 404 Page with custom _error dev mode should respond to 404 correctly",
                "location": null,
                "status": "failed",
                "title": "should respond to 404 correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"oops\"\nReceived string:    \"Execution of get_from_source failed·\nCaused by:\n    0: Execution of resolve_source_request failed\n    1: Execution of CombinedContentSource::get failed\n    2: Execution of create_app_source failed\n    3: Execution of load_next_config failed\n    4: Execution of evaluate failed\n    5: Execution of get_evaluate_pool failed\n    6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n    7: Execution of turbopack_core::asset::AssetContentVc::write failed\n    8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n    9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n   10: Execution of content_from_relative_path failed\n   11: failed to canonicalize embedded file path\n   12: No such file or directory (os error 2)\"\n    at Object.<anonymous> (/work/test/integration/404-page-custom-error/test/index.test.js:32:18)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Default 404 Page with custom _error dev mode should render error correctly",
                "location": null,
                "status": "failed",
                "title": "should render error correctly"
              },
              {
                "ancestorTitles": [
                  "Default 404 Page with custom _error",
                  "dev mode"
                ],
                "failureMessages": [
                  "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"hello from index\"\nReceived string:    \"Execution of get_from_source failed·\nCaused by:\n    0: Execution of resolve_source_request failed\n    1: Execution of CombinedContentSource::get failed\n    2: Execution of create_app_source failed\n    3: Execution of load_next_config failed\n    4: Execution of evaluate failed\n    5: Execution of get_evaluate_pool failed\n    6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n    7: Execution of turbopack_core::asset::AssetContentVc::write failed\n    8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n    9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n   10: Execution of content_from_relative_path failed\n   11: failed to canonicalize embedded file path\n   12: No such file or directory (os error 2)\"\n    at Object.<anonymous> (/work/test/integration/404-page-custom-error/test/index.test.js:37:18)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                ],
                "fullName": "Default 404 Page with custom _error dev mode should render index page normal",
                "location": null,
                "status": "failed",
                "title": "should render index page normal"
              }
            ],
            "endTime": 1675463959594,
            "message": "  ● Default 404 Page with custom _error › dev mode › should respond to 404 correctly\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 500\n\n      24 |   it('should respond to 404 correctly', async () => {\n      25 |     const res = await fetchViaHTTP(appPort, '/404')\n    > 26 |     expect(res.status).toBe(404)\n         |                        ^\n      27 |     expect(await res.text()).toContain('This page could not be found')\n      28 |   })\n      29 |\n\n      at Object.<anonymous> (integration/404-page-custom-error/test/index.test.js:26:24)\n\n  ● Default 404 Page with custom _error › dev mode › should render error correctly\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"oops\"\n    Received string:    \"Execution of get_from_source failed·\n    Caused by:\n        0: Execution of resolve_source_request failed\n        1: Execution of CombinedContentSource::get failed\n        2: Execution of create_app_source failed\n        3: Execution of load_next_config failed\n        4: Execution of evaluate failed\n        5: Execution of get_evaluate_pool failed\n        6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n        7: Execution of turbopack_core::asset::AssetContentVc::write failed\n        8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n        9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n       10: Execution of content_from_relative_path failed\n       11: failed to canonicalize embedded file path\n       12: No such file or directory (os error 2)\"\n\n      30 |   it('should render error correctly', async () => {\n      31 |     const text = await renderViaHTTP(appPort, '/err')\n    > 32 |     expect(text).toContain(isDev ? 'oops' : 'Internal Server Error')\n         |                  ^\n      33 |   })\n      34 |\n      35 |   it('should render index page normal', async () => {\n\n      at Object.<anonymous> (integration/404-page-custom-error/test/index.test.js:32:18)\n\n  ● Default 404 Page with custom _error › dev mode › should render index page normal\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"hello from index\"\n    Received string:    \"Execution of get_from_source failed·\n    Caused by:\n        0: Execution of resolve_source_request failed\n        1: Execution of CombinedContentSource::get failed\n        2: Execution of create_app_source failed\n        3: Execution of load_next_config failed\n        4: Execution of evaluate failed\n        5: Execution of get_evaluate_pool failed\n        6: Execution of turbo_tasks::completion::CompletionsVc::all failed\n        7: Execution of turbopack_core::asset::AssetContentVc::write failed\n        8: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::content failed\n        9: Execution of turbopack_ecmascript::chunk::EcmascriptChunkContentVc::code failed\n       10: Execution of content_from_relative_path failed\n       11: failed to canonicalize embedded file path\n       12: No such file or directory (os error 2)\"\n\n      35 |   it('should render index page normal', async () => {\n      36 |     const html = await renderViaHTTP(appPort, '/')\n    > 37 |     expect(html).toContain('hello from index')\n         |                  ^\n      38 |   })\n      39 |\n      40 |   if (!isDev) {\n\n      at Object.<anonymous> (integration/404-page-custom-error/test/index.test.js:37:18)\n",
            "name": "/work/test/integration/404-page-custom-error/test/index.test.js",
            "startTime": 1675463949087,
            "status": "failed",
            "summary": ""
          }
        ],
        "wasInterrupted": false
      }
    }
  ]
}